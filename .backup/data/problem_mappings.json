{
  "generated_at": "2025-09-16T14:02:42.423262Z",
  "count": 641,
  "items": [
    {
      "key": "implement-min-heap",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/1. Learning/01. Implement min heap.cpp",
        "hash": "6b9f3d02d0555846c4ea491cdc0199de35c9ab43cd18a4304d4bf0421ee8cf44"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-if-array-is-heap",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/1. Learning/02. Check if array is heap.cpp",
        "hash": "36571bf1621837664dfbd80764bfbdf416d4bcefa4a7fc21dbcac0aa94616566"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "convert-min-heap-to-max-heap",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/1. Learning/03. Convert min heap to max heap.cpp",
        "hash": "cf5789bf38b26c7aa170749a9fa6470f89f0e7f05d4f443290bb3c9afb885fd2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "top-k-frequent-elements",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/06. Top K frequent elements.cpp",
        "hash": "8d2c1b036ccd515d915f500c91913e080f8e38cbf12512bac8d96b632129b08b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "design-twitter",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/01. Design Twitter.cpp",
        "hash": "5262a97ff7f446ea69a603f16985790024cee51d6312d8bdbbb0ff300dd0faa7"
      },
      "python": {
        "id": "step_11_-_heaps_design-twitter",
        "file": "Step 11 - Heaps/DESIGN-TWITTER.py",
        "hash": null,
        "title": "Design Twitter",
        "difficulty": "Hard",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "matched"
    },
    {
      "key": "kth-largest-element-in-stream",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/03. Kth largest element in stream.cpp",
        "hash": "3481adadb0d18410c4c628937bccafb9d5f56d70e28a61dfe5819c0d45e4bd4f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "median-in-a-stream",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/05. Median in a stream.cpp",
        "hash": "dae799d40d0c76ada10c74ee43f147f050636a9358e6c23ca8f785bdadffddea"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-cost-to-join-n-ropes",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/02. Minimum Cost to join n ropes.cpp",
        "hash": "2e7bc56d877a101b3477d32e366e118ec3b4d2ca95fb048eb2627a783717d4bf"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "maximum-k-sum-combinations",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/3. Hard Problems/04. Maximum K sum combinations.cpp",
        "hash": "cffa71e688ec1dd975b99fca0f4332edaae5ac1f0ef54c15f01b0aa66a3cc55b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kth-smallest-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/02. Kth smallest element.cpp",
        "hash": "b38279139275af8233c23a4c64996d0bf62a0a08df2780bc88e1dd22f2e38ceb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kth-largest-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/01. Kth largest element.cpp",
        "hash": "0c9d38104fc01da9497fedbe890df12faee751b78aefcb1b0b4daf0c79e2c0cc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "divide-array-into-sets-of-k-consecutive-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/07. Divide array into sets of K consecutive number.cpp",
        "hash": "8ce5aed7b322007c4c663fe0eb23fc7b69fe80447254b4b4667ceea767c6a1b9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "task-scheduler",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/06. Task Scheduler.cpp",
        "hash": "f7dda6b86d8bdb37288073e21e29bcd7c8c18cabee5c02f4a8107ef50603ce8a"
      },
      "python": {
        "id": "step_11_-_heaps_task-scheduler",
        "file": "Step 11 - Heaps/TASK-SCHEDULER.py",
        "hash": null,
        "title": "Task Scheduler",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "matched"
    },
    {
      "key": "arrange-by-rank",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/05. Arrange by rank.cpp",
        "hash": "3b7332d53940f8de1b71b98bc72765887aa974ab252eb2e8fbd541ae4826c32d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "merge-k-sorted-arrays",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/03. Merge K sorted arrays.cpp",
        "hash": "6b2b897656cb58e0cc6b223d783b2e03892972540d49b086bde1c2f92e42f0b1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "merge-k-sorted-lists",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/09. Heaps/2. Medium Problems/04. Merge K sorted Lists.cpp",
        "hash": "a6e1dde3888e1509caf70967442f3a9cc11ca54776dcd84e79f3a00a8847d149"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-number-of-insertions-to-make-parenthesis-valid",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/16. Strings (Hard)/Hard/01. Minimum number of insertions to make parenthesis valid.cpp",
        "hash": "fbab19ce35cc1722264f81491357cc382d7eaccb20e0cb814d2292a67ad66d6d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-happy-prefix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/16. Strings (Hard)/Hard/04. Longest Happy Prefix.cpp",
        "hash": "08c7f8307fc90419826a32d8b2565b01dcbc501927f6971f3b3ed1e85d31d956"
      },
      "python": {
        "id": "step_05_+_18_-_strings_longest-happy-prefix",
        "file": "Step 05 + 18 - Strings/LONGEST-HAPPY-PREFIX.py",
        "hash": null,
        "title": "Longest Happy Prefix",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "kmp-or-z-string-matching-algo",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/16. Strings (Hard)/Hard/03. KMP or Z string matching algo.cpp",
        "hash": "5c4240ac6c4804b7121e842786d629e80805f7f2e25c9fe4a49358a635608851"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-and-say",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/16. Strings (Hard)/Hard/02. Count and Say.cpp",
        "hash": "240cc1ff4aaf3274f1aec83f354869f5ac8f489b1b7d4d0f3d05c5bf2e97e0da"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "shortest-palindrome",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/16. Strings (Hard)/Hard/05. Shortest Palindrome.cpp",
        "hash": "f6932786468bce04d3c049a0effdd3cfbe066377d339706864626a173814e0b3"
      },
      "python": {
        "id": "step_05_+_18_-_strings_shortest-palindrome",
        "file": "Step 05 + 18 - Strings/SHORTEST-PALINDROME.py",
        "hash": null,
        "title": "Shortest Palindrome",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "implement-trie-prefix-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/1. Theory/01. Implement Trie (Prefix Tree).cpp",
        "hash": "dbc16d63c3db2c123f24c8d5a4d9d5a8b2c2dab5aa521f6f9fd80ef39d1aaaa2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-trie-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/2. Problems/01. Implement Trie 2.cpp",
        "hash": "68a0d96f9b86efa24f1db7a566a1cd56109f4fd493fc2eb7f7a2c3158e4deb4d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bitwise-basic-operations",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/2. Problems/04. Bitwise basic operations.cpp",
        "hash": "3e8c431ce4ea81d6cc076dfee339f9a1be0d3cc367619124e0130dbdaa4bde47"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "maximum-xor-of-two-numbers",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/2. Problems/05. Maximum XOR of two numbers.cpp",
        "hash": "070bf23ffc3fe0e46efbe75c1065686a3ae1e4b776f0621213385ed0e8193320"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-distinct-subsitrings",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/2. Problems/03. Count distinct subsitrings.cpp",
        "hash": "5a6bfecabcfe3efda545434f544d3740ad2a345d7cd649cd4bfc10b0dae5f716"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "complete-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/15. Tries/2. Problems/02. Complete String.cpp",
        "hash": "c1ee572608bbaf636e730ade69eb00f1a95bb012bcd4fc5b5a6b37145acb9fd0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "level-order-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/06. Level Order Traversal.cpp",
        "hash": "2ffadf5140e1ea1ccff416d0dae1236bb201589709b626ee8cb2fc04054ddc94"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "introduction-to-trees",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/01. Introduction to trees.cpp",
        "hash": "50b4bbcde3719ff40bff921abff38ea6ac5bef52b1c562c55d03a00bcf33d2c4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "all-in-one-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/10. All in one traversal.cpp",
        "hash": "53cac4256db4e6c27315610ebdb300c102a33e96f0b5e0e8ee20ea941c0acdb3"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "postorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/05. Postorder Traversal.cpp",
        "hash": "b92e703d394110cc0e5110c0286a965016696ff96149d85ede43010ced1f8e40"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "iterative-preorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/07. Iterative Preorder Traversal.cpp",
        "hash": "0db3f29cce9529339b5fd9125c7cdb2e7518208a90915ce678fd66a1e4b29767"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "binary-tree-representation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/02. Binary Tree representation.cpp",
        "hash": "e41b36152dd07d64f3b0c387284441da2f3a8508b58906e0789f8104e41e0cb0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "preorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/03. Preorder Traversal.cpp",
        "hash": "04a924240eff3f90692f4f653bd873fc37e90c8db61124805d60f5b72036882b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "iterative-postorder",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/09. Iterative Postorder.cpp",
        "hash": "22b3a3258a73c715c03bb9ecdab9de36c78cc2c93f28b17ddc2e66e6010aefba"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "iterative-inorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/08. Iterative Inorder Traversal.cpp",
        "hash": "f522caa18daffc7aa4d5ab9a68faa3b59d5641d22eefd32dc78fa025e28a4ac4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "inorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/1. Traversals/04. Inorder Traversal.cpp",
        "hash": "35e774daa449ffd8086d1f4a5f6bdb277676ed6287c1f1f38d096c6e82ccc7f0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bottom-view",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/10. Bottom View.cpp",
        "hash": "5c21df034dca3bd46f0a35501cd295dd7e599206081298cf1058b455aa10ccb4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "zig-zag-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/06. Zig-Zag Traversal.cpp",
        "hash": "6c32ad09e8d3f9146f18b2fabbd242433381a02a84c3a479899ca1d574bb89eb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "maximum-path-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/04. Maximum Path Sum.cpp",
        "hash": "26c05a35943bd7fe9ee3ffc044906d3edc6dde9cc736a60036bb7643c799b2f0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "diameter-of-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/03. Diameter of Binary Tree.cpp",
        "hash": "4d19e8d8baae69aceb9d20b01c93bbaeb567b8025de0b93f2993624b2f9f155d"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_diameter-of-binary-tree",
        "file": "Step 13 + 14 - Trees + BST/DIAMETER-OF-BINARY-TREE.py",
        "hash": null,
        "title": "Diameter Of Binary Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "height-of-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/01. Height of binary tree.cpp",
        "hash": "45e248df29f16145d2ab15a6ddc889898c07f5835e40153f2ada3d041778bbbd"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "vertical-order-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/08. Vertical Order Traversal.cpp",
        "hash": "4470ce9e5d39c31ad28892d6797f2a6a9b6ad61acaf669cdf55a3c187223b232"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "balanced-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/02. Balanced Binary Tree.cpp",
        "hash": "e4f0d8a09ec6b2a03169acecff271f3c9e22f55cae197718f72250e4245e99d5"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_balanced-binary-tree",
        "file": "Step 13 + 14 - Trees + BST/BALANCED-BINARY-TREE.py",
        "hash": null,
        "title": "Balanced Binary Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "boundary-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/07. Boundary Traversal.cpp",
        "hash": "084fc6d1b04dca83f4e95cb73049eb51f387c865cbd0ee82860f82500c243959"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "symmetric-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/12. Symmetric Tree.cpp",
        "hash": "658125ccfd0ddd77e3cb50ba85ea7986b9e2f34d176dbad96b4330ef45568cfe"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "left-or-right-view",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/11. Left or Right View.cpp",
        "hash": "9139eab19910f3a044a44e28551445a3cd14c4b5da90473d950a03949de5eea2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "same-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/05. Same Tree.cpp",
        "hash": "205ec25df56754789ef3ad944fd31b00c16d0774d837e1f7c3709d6b55a0b2db"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_same-tree",
        "file": "Step 13 + 14 - Trees + BST/SAME-TREE.py",
        "hash": null,
        "title": "Same Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "top-view",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/2. Medium Problems/09. Top View.cpp",
        "hash": "5ef127b7fdf7b9261b53cd8fc2b8e589893f4ccd94c10d6029cb85e92a2ebe8d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "all-nodes-at-distance-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/05. All nodes at distance K.cpp",
        "hash": "b9bab3e764aca06d538c1ae70750e31c3d3243b9e879b0037d46e64aa63f9cae"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "morris-inorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/12. Morris Inorder Traversal.cpp",
        "hash": "d83e6cf4f8b72d7f1b7ba129c96e5761d329a24ee972de77096df8bed0558d26"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "morris-preorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/11. Morris Preorder Traversal.cpp",
        "hash": "76666569d4526c202e67070b092802ddd43f1ee7d2ef730461e15ba17d9f915a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "min-time-to-burn-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/06. Min time to burn binary tree.cpp",
        "hash": "bcffc18b223ff642f74254760fd8a74b6ead5d13df69edfda6493c412a7fe7b9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "flatten-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/13. Flatten Binary Tree.cpp",
        "hash": "97cb2afa227f5c39345bd417e8f87782253c138c5979469377b858213f847ffb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-nodes-in-complete-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/07. Count nodes in complete binary tree.cpp",
        "hash": "47738790fd8384e1765bbea3fb48f6361b40e9fbc8f3e05b51ac0714ef6174da"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "all-root-to-leaf-paths",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/01. All root to leaf paths.cpp",
        "hash": "43ce182e219d43b999e6ac909a9a8b18c7bf6cabf8801478fd510052350b0d55"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "construct-bt-from-inorder-and-preorder",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/08. Construct BT from inorder and preorder.cpp",
        "hash": "55993b344f7c033c8b7c5faab1181da26e404a1dbd8ae7e242a2b1f6e3bffe7c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "lowest-common-ancestor",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/02. Lowest Common Ancestor.cpp",
        "hash": "3dad02746982c9f858f3df2f6770d574aa37d91ebf4b043d6562a9130b122eb8"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_lowest-common-ancestor",
        "file": "Step 13 + 14 - Trees + BST/LOWEST-COMMON-ANCESTOR.py",
        "hash": null,
        "title": "Lowest Common Ancestor",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "construct-bt-from-inorder-and-postorder",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/09. Construct BT from inorder and postorder.cpp",
        "hash": "5aa7acde46de3aafc679b26de5a598dbd203015f96cf1493f2ef7553b32973be"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-children-sum-property",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/04. Check children sum property.cpp",
        "hash": "92c149d4c50bd27e6f8d3a76d6e61de50cd710b0d397249465e60bdc85c7f440"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "max-width-of-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/03. Max width of binary tree.cpp",
        "hash": "0be4ab5bc9eb92a3e09f14fc8f1427bb98d7f4c2a911fbdb1f527bce546adf84"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "serialize-and-deserialize",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/11. Binary Trees/3. Hard/14. Serialize and Deserialize.cpp",
        "hash": "eb2da37c789f78bf9db906568094aec712e416d072583115035128080ef5ea2c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "majority-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/03.Majority_element.cpp",
        "hash": "283d369c796e5748e38629cb838e3ae4fc6ff8b6cd05fa20b706272ce0b731fb"
      },
      "python": {
        "id": "step_03_-_arrays_majority-element",
        "file": "Step 03 - Arrays/MAJORITY-ELEMENT.py",
        "hash": null,
        "title": "Majority Element",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "number-of-subarray-sum-equal-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/05.Number_of_subarray_sum_equal_k.cpp",
        "hash": "9447831ed08b1c128c7aa2c9f898c03e0aed29049c985947c87d0a648a8f17f5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "2-sum-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/01.2_sum_problem.cpp",
        "hash": "a815c99b3a58a95ec6a8f274d7be9f9808999b70aee79472e2e58359ebb9aa8d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "leaders-in-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/09.Leaders_in_array.cpp",
        "hash": "6d8225f0bd12ea3b709036f3062a4aa2f21751e9e4752b038ca27fb9d8912ee8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sort-0-1-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/02.Sort_0_1_2.cpp",
        "hash": "019fe07bcc9ec29df620b3a34d390362787a0c0db9fbfa271f113829ca96f328"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kadane-s-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/04.Kadane's_algorithm.cpp",
        "hash": "27ff0d2bb005e0c67c58751174f84a6c89cf5fc89b8bc5598b4454cb1323fa4a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "stock-buy-sell",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/06.Stock_buy_sell.cpp",
        "hash": "56693a55e3d7bd85e6f78450173dc3e1b4c854f40e06f37591cfa30a01deecca"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rearange-elements-by-sign",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/07.Rearange_elements_by_sign.cpp",
        "hash": "85230798fe038fce62368134ba78f27ef66272ad57e0875fd744358613519632"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "set-matrix-0-s",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/11.Set_matrix_0's.cpp",
        "hash": "d76a201d9db420f05bff46218097e0522061c21bf5e6c2793d28386cefadc63f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rotate-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/12.Rotate_matrix.cpp",
        "hash": "bec35870079ff4af4a4cefe26e0c8bf9c76b7c871812ad9ceae56bec674c5362"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "spiral-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/13.Spiral_traversal.cpp",
        "hash": "e120992b7ee6efc71aa049d44722c9edb5087340668c41e2269d9aa31e85c9b8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-consecutive-subsequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/10.Longest_consecutive_subsequence.cpp",
        "hash": "e1b55fcfd9cccd3d2374018c9fbfdc1e300500b64f8afd54ee2f4829ca8d0b17"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "next-permutation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/2.Medium/08.Next_permutation.cpp",
        "hash": "328e2eb1e84e65b0fbf480738b9268ee696106dc7f7049a004abf59b287e3afb"
      },
      "python": {
        "id": "step_03_-_arrays_next-permutation",
        "file": "Step 03 - Arrays/NEXT-PERMUTATION.py",
        "hash": null,
        "title": "Next Permutation",
        "difficulty": "Hard",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "pascal-triangle",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/01.Pascal_triangle.cpp",
        "hash": "6b7ee8f7b3ac2822b933862c2e855bd2f72e8c0fd7de5369fc8210c6eabac2f0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "repeating-and-missing-numbers",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/09.Repeating_and_missing_numbers.cpp",
        "hash": "335246dfc64150ed5c6ed9d6cf1ff8bdb261f7db4ed85d6a23cd9ce77b6616f6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "largest-subarray-with-0sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/05.Largest_subarray_with_0sum.cpp",
        "hash": "4cdab4e5b93f3d4faa491142901226815b9657eae10a1d9e66a3669f72f6a573"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-subarray-with-sum-k-containg-ves-and-ves",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/13.Longest_subarray_with_sum_k_containg_+ves_and_-ves.cpp",
        "hash": "706b8bfce35ef278aa8d2795061508352c26f01cceeff866830c2b0eee94f4b0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-pairs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/11.Reverse_pairs.cpp",
        "hash": "b35c7ea484a1e7fafc3b9aac368440c1b899c375d0291ad46f60b3b62c95e0d6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "3-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/03.3_sum.cpp",
        "hash": "15496a9afc088ac65c55d8999f926a9f8276610ac53a9f27f7def45793579aa9"
      },
      "python": {
        "id": "step_03_-_arrays_3-sum",
        "file": "Step 03 - Arrays/3-SUM.py",
        "hash": null,
        "title": "3 Sum",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "merge-overlapping-subinterval",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/07.Merge_overlapping_subinterval.cpp",
        "hash": "b58e511f7ad8a122d0ea6ccbcc9b0cc7bc855d5d00acdb7f3e2979d348817879"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "4-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/04.4_sum.cpp",
        "hash": "26061095d21dc210403911dbd47d80df35f117172cc7d2cd78cc09e7b9e21004"
      },
      "python": {
        "id": "step_03_-_arrays_4-sum",
        "file": "Step 03 - Arrays/4-SUM.py",
        "hash": null,
        "title": "4 Sum",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "maximum-product-subarray",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/12.Maximum_product_subarray.cpp",
        "hash": "bdb8a8c2aa29dcc2849abeef81440f370f538fa2ead56a55d6fa5dbbcc53b598"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "merge-2-sorted-array-without-space",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/08.Merge_2_sorted_array_without_space.cpp",
        "hash": "4fc14927051847fa1892173a7153243f0234352b3a614646c469682f24eaad18"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "subarrays-with-xor-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/06.Subarrays_with_xor_k.cpp",
        "hash": "ee471fdbb3e48b21996e53086ed3196af1f8be042b95211facf38fe51eb48a8b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-inversions",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/10.Count_inversions.cpp",
        "hash": "bee6d873af87ec06c1acc4ffcdf616fa094a393a5b049c81fedc6a5e64c6ba99"
      },
      "python": {
        "id": "step_03_-_arrays_count-inversions",
        "file": "Step 03 - Arrays/COUNT-INVERSIONS.py",
        "hash": null,
        "title": "Count Inversions",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "majority-element-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/3.Hard/02.Majority_element_2.cpp",
        "hash": "9757eb7f51ee453d225c9c5d8c75f019e2334ee16a93dc6ac5707e7a71d2b029"
      },
      "python": {
        "id": "step_03_-_arrays_majority-element-2",
        "file": "Step 03 - Arrays/MAJORITY-ELEMENT-2.py",
        "hash": null,
        "title": "Majority Element 2",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "longest-subarray-with-given-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/12.Longest_subarray_with_given_sum.cpp",
        "hash": "22c702d4449ac29e5bfc7b1853584f71d1926403478473b279a6c0a70b2fc884"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "largest-element-in-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/01.Largest_element_in_array.cpp",
        "hash": "f00eb2d305bd937b0c5520c558e8036aa5b4f3bf5560307955d8783cd7423736"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rotate-array-left-by-1place",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/05.Rotate_array_left_by_1place.cpp",
        "hash": "f65e1650a8a140d2b25175025808af52351244ee77f3b29a3d5a1affed4eafeb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "second-largest-element-in-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/02.Second_largest_element_in_array.cpp",
        "hash": "ec33bdc02c80c01255061b95077d447a0d70581400b38e46c347cc639fbc595f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "max-consecutive-1-s",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/11.Max_consecutive_1's.cpp",
        "hash": "471244ebc7b42f47a8544f719a5794b22692e26edbaacd8ec33516c118e58dea"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-element-present-only-once",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/13.Find_element_present_only_once.cpp",
        "hash": "d10d4a8ef1edb3c409cb8e19e6f9cb2471ccf2725ccb830edfdb58fdcda23c2a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-if-array-is-sorted-and-rotated",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/03.Check_if_array_is_sorted_and_rotated.cpp",
        "hash": "5e06b586e35f562e90180fc15062a24759f0f33bbb50aa0c7b4bbffc7d295387"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "linear-search",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/08.Linear_search.cpp",
        "hash": "a6208ba5800a62b75cfca9c8f1191487ea4a2b05bd015652c9157a54f85da4e4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "remove-duplicates-from-sorted-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/04.Remove_duplicates_from_sorted_array.cpp",
        "hash": "8b2e0f7c888a4db9dc73f23ab545bdf9f2c29b311a6f4acc2d0d78d89c4847f9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "union-of-2-sorted-arrays",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/09.Union_of_2_sorted_arrays.cpp",
        "hash": "2c2690bebac894cdaeaa98432296cbd768906df0deff5050e28adb02eb7ac00b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "missing-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/10.Missing_number.cpp",
        "hash": "196b1db531d616feeed15ac9355a9657c7742a345df90624410de7300b746467"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "move-0-s-to-end",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/07.Move_0's_to_end.cpp",
        "hash": "296f13cb48dec4b17d436184869ca6718ef360865ee7c72c7144c5c33756eda6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rotate-array-left-right-by-k-places",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/01.Arrays/1.Easy/06.Rotate_array_left&right_by_k_places.cpp",
        "hash": "2b21c30c6d8f73f7b5d4e68be38a30ec75ded66dc73fe6ce2593dcf78e672ad4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "letter-combinations-of-phone",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/10.Letter combinations of phone.cpp",
        "hash": "b78901319a965e5cde6215c782403f340b292d3e9b205605d6992f11535194d6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "genereate-all-valid-parenthesis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/01.Genereate all valid parenthesis.cpp",
        "hash": "8dd35e72c77715b9ac781421a8e01da6600511a3a3e8e12f5353cede5a7b0485"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "subset-1",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/05.Subset 1.cpp",
        "hash": "695668b98353b3a2987c689566c55994086074301114755895991077c0fa9cc9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "combination-sum-1",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/07.Combination Sum 1.cpp",
        "hash": "c87a5cdcdd0586ec2e71d39375d1d7ba40b27bc5a0fe96d36a532e98c7734cbe"
      },
      "python": {
        "id": "step_07_-_recursion_combination-sum-1",
        "file": "Step 07 - Recursion/COMBINATION-SUM-1.py",
        "hash": null,
        "title": "Combination Sum 1",
        "difficulty": "Hard",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "count-distinct-substrings",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/03.Count distinct substrings.cpp",
        "hash": "79dc3af9786f8a29d566cfb9c73770dd09859db55a0c27c717663c3ec0d92308"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "combination-sum-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/08.Combination Sum 2.cpp",
        "hash": "3db9e9c06dd92ccff26ae0e7be51bfc3289adec6c1c0d3e46e10e4b340d50c12"
      },
      "python": {
        "id": "step_07_-_recursion_combination-sum-2",
        "file": "Step 07 - Recursion/COMBINATION-SUM-2.py",
        "hash": null,
        "title": "Combination Sum 2",
        "difficulty": "Hard",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "combination-sum-3",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/09.Combination Sum 3.cpp",
        "hash": "9d7f439c4665a8d137c9087233a5edb9b86bfbb47048015c325820ee904e63a8"
      },
      "python": {
        "id": "step_07_-_recursion_combination-sum-3",
        "file": "Step 07 - Recursion/COMBINATION-SUM-3.py",
        "hash": null,
        "title": "Combination Sum 3",
        "difficulty": "Hard",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "subset-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/06.Subset 2.cpp",
        "hash": "0ef810da2138159cb4854ad8b5dd42fcffd8fab037716cb7524046f17e667315"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-subsets-with-sum-equal-to-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/04.Count subsets with sum equal to k.cpp",
        "hash": "53e449af95a4044cb215b8bd2bc569d5dd06916a0535ebfef387fb7c3b231020"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "power-set",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/2.Subsequences Pattern/02.Power set.cpp",
        "hash": "c3f27c29221c13765148d107d0f68ad31fbed00f8a3120b1eace392964f2ca3b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-atoi-via-recursion",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/1.Get Strong Hold/01.Implement_atoi_via_recursion.cpp",
        "hash": "46eeb9d545d915b8fe1b58630904fdc03e42b51acde6c9e9a3f6aa0b53a5fe3e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-stack-using-recursion",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/1.Get Strong Hold/03.Reverse_stack_using_recursion.cpp",
        "hash": "757586bd28d007c79b6d587fb4794361f9832100150cabef3e74738f91ed6291"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-good-numbers",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/1.Get Strong Hold/02.Count_good_numbers.cpp",
        "hash": "e1e335ef9401a0b7497820829362e82ad5f334732ddaadcef2a97f5f0bcfcfdc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sort-stack-using-recursion",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/1.Get Strong Hold/04.Sort_stack_using_recursion.cpp",
        "hash": "9728d78277574702a76ff71c4601108712d5afccffbe2e5991b939327eeb307d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "n-queens",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/05.N queens.cpp",
        "hash": "d9555bb14b386220a32a882c860a2a834e9da4a07230708bf1bd279e9200a448"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "word-search-in-grid",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/02.Word search in grid.cpp",
        "hash": "a56ca4ab9913c8e47288a1786b6baa4f7bb6a1bb0ea9f1859689b6b6588986c7"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "word-break",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/06.Word Break.cpp",
        "hash": "8f3eb19eee80b03b67efbc90ba5c66ad25eed9be9ec9784b303503c12f386be0"
      },
      "python": {
        "id": "step_07_-_recursion_word-break",
        "file": "Step 07 - Recursion/WORD-BREAK.py",
        "hash": null,
        "title": "Word Break",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "rat-in-maze",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/03.Rat in maze.cpp",
        "hash": "2ff5bc4b92aacb2b0894070cadc0366f81d698282dbda6445f98ff9ee51c7c22"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "m-coloring-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/04.M coloring problem.cpp",
        "hash": "e2920a5ed818cb6320d6fd1368b75f7ebc6d68c3cf96023de6f9e7fd28019d57"
      },
      "python": {
        "id": "step_07_-_recursion_m-coloring-problem",
        "file": "Step 07 - Recursion/M-COLORING-PROBLEM.py",
        "hash": null,
        "title": "M Coloring Problem",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "sudoku-solver",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/07.Sudoku solver.cpp",
        "hash": "19f2b6d59b58267c0bb9f2a892e1a2fee026d0115b94090494d3a014a082fa42"
      },
      "python": {
        "id": "step_07_-_recursion_sudoku-solver",
        "file": "Step 07 - Recursion/SUDOKU-SOLVER.py",
        "hash": null,
        "title": "Sudoku Solver",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "matched"
    },
    {
      "key": "palindrome-partioning",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/05.Recursion/3.Try Out All Combos/01.Palindrome partioning.cpp",
        "hash": "082e8da1579954c617ef7ae42c7cd8d7caf2221c9ea79d66e9f2c069cd670a69"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "distinct-islands",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/10. Distinct Islands.cpp",
        "hash": "7b54eac4e5eb42aa9f30b7a9a662f7b39acfa14dd4987d4f51301f3e7fdbf762"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "detect-cycle-in-directed-graph",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/12. Detect Cycle in Directed Graph.cpp",
        "hash": "3d41049a15a155e0edae4573752cf490b170ae6f4b735b21505b74483ff9fc9b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "01-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/05. 01 Matrix.cpp",
        "hash": "10762c4c56a369c93ff64e46537058d7237e885da36a2f660236ce498d74add4"
      },
      "python": {
        "id": "step_15_-_graphs_01-matrix",
        "file": "Step 15 - Graphs/01-MATRIX.py",
        "hash": null,
        "title": "01 Matrix",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "surrounded-regions",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/06. Surrounded Regions.cpp",
        "hash": "6891ae5c01a211529910bd7b1725477bd58124ad58387c96cc87e4be2a7d330a"
      },
      "python": {
        "id": "step_15_-_graphs_surrounded-regions",
        "file": "Step 15 - Graphs/SURROUNDED-REGIONS.py",
        "hash": null,
        "title": "Surrounded Regions",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "word-ladder",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/08. Word Ladder.cpp",
        "hash": "bbfab8c595760c3ab6489d8e72d53d41ccf33a1a08395aee3391986af4ede6c9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "flood-fill-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/03. Flood-Fill Algorithm.cpp",
        "hash": "d5dd734c5127d58947c29241569d038fd9cdb62287c7c2c8ce6f55a563ea3233"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "detect-cycle-in-undirected-graph",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/04. Detect Cycle in Undirected Graph.cpp",
        "hash": "1f2c8be01bc1fd28991f36d72eb1b6c16f6366cf6f29ac8007c202af92e4495b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bipartite-graph",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/11. Bipartite Graph.cpp",
        "hash": "d0019029d143e63c28b3ba3ff5dd80b7e0d7ed20a392153f665185097abd6737"
      },
      "python": {
        "id": "step_15_-_graphs_bipartite-graph",
        "file": "Step 15 - Graphs/BIPARTITE-GRAPH.py",
        "hash": null,
        "title": "Bipartite Graph",
        "difficulty": "Hard",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "rotten-oranges",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/02. Rotten Oranges.cpp",
        "hash": "16bd76c0f0ace4e0bc3848b42ab56ad076292fb74da3bd1abab21f79d8aa78d9"
      },
      "python": {
        "id": "step_15_-_graphs_rotten-oranges",
        "file": "Step 15 - Graphs/ROTTEN-ORANGES.py",
        "hash": null,
        "title": "Rotten Oranges",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "count-the-number-of-provinces",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/01. Count the number of provinces.cpp",
        "hash": "2ca340b461e70bd681d09577cf97e5ce2d5b4f0360eb468536839a99dd399094"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-enclaves",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/2. Traversal Problems/07. Number of Enclaves.cpp",
        "hash": "e58ab4fd28047e9907bc5a662aa4394f5526de687413d82fe28ce6d0524f4ba7"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kahn-s-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/02. Kahn's Algorithm.cpp",
        "hash": "2d8d011dd7fa8924834282e73a30324887b923e2ae7e9edf04a7184775247778"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "alien-dictonary",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/06. Alien Dictonary.cpp",
        "hash": "3372b7b00d3e2cac1287bc80f65bc8384e171afd17010cd38a550c24312bdbf5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "course-scheduler-1",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/03. Course Scheduler 1.cpp",
        "hash": "90cc9e44d3342ca3fab8ec63326b1eeb0e9781958f0a6870641f2671873f2cf8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "course-scheduler-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/04. Course Scheduler 2.cpp",
        "hash": "021ee35a7512c37629a560e43c1f169bc319a4c5eae6d64037acca076e86e6a2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "topological-sorting",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/01. Topological Sorting.cpp",
        "hash": "cb660c041d69da076334aa5ad09dcef4b5f190db758b87190be6a17b930e708d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-eventual-safe-state",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/3. Topo Sort Problems/05. Find Eventual Safe State.cpp",
        "hash": "f357cdf1e37ef8877fd5bd3a61fb8a8246d8beed3ce5878722c100b484e27abc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bfs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/1. Learning/03. BFS.cpp",
        "hash": "4c11d89853a9c28d50d80713eb1318235dc02f67017f963053ab10c6c9121cf1"
      },
      "python": {
        "id": "step_15_-_graphs_bfs",
        "file": "Step 15 - Graphs/BFS.py",
        "hash": null,
        "title": "Bfs",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "graph-representation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/1. Learning/02. Graph Representation.cpp",
        "hash": "7a910cd3cf8f61c036dfb440f31bad36343706bb98b7bc1f5bc3b960b1a42ed9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-the-number-of-graphs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/1. Learning/01. Count the number of graphs.cpp",
        "hash": "0c44687871274d55a11d7de97a8d6399418341e7d920cfc5dfe64c491b38b5c4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "dfs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/1. Learning/04. DFS.cpp",
        "hash": "19b91ef55d31e97dd5c94a5214c91e4a16491afefc4a464e0dbb23a59134e30b"
      },
      "python": {
        "id": "step_15_-_graphs_dfs",
        "file": "Step 15 - Graphs/DFS.py",
        "hash": null,
        "title": "Dfs",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "bridges-in-graph",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/6. Other Algorithms/01. Bridges in graph.cpp",
        "hash": "0f72e39a3b12264c5e225b97773c0429c4a5e1b4a7d051b2fdba6dd920b780c4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "strongly-connected-components",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/6. Other Algorithms/02. Strongly Connected Components.cpp",
        "hash": "c6e36432a90a28c9e9da2d013e62e9385a1d75ad54fcd61533f295391359743b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "making-large-island",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/07. Making Large Island.cpp",
        "hash": "a1b64ec17dcd42d381b80dd4758270c3ab01152aca6b58c769cd86ee34e2e154"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "account-merge",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/05. Account Merge.cpp",
        "hash": "b6d7c15040b41d47812a6a7d51a948bcf30f2cc57bead5b0b0134c26521be0d3"
      },
      "python": {
        "id": "step_15_-_graphs_account-merge",
        "file": "Step 15 - Graphs/ACCOUNT-MERGE.py",
        "hash": null,
        "title": "Account Merge",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "matched"
    },
    {
      "key": "prim-s-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/01. Prim's Algorithm.cpp",
        "hash": "27e1e9864008af9f4f240f4bf33b4b91b0aab560b14ff9ace7830254402964aa"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-islands-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/06. Number of islands 2.cpp",
        "hash": "56aa843e2734ea05b559afb4a58c6667d8b0ef734a3506cdbe54bc1a186e81da"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "swim-in-rising-water",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/08. Swim in rising water.cpp",
        "hash": "3398bee56fc43668bd6f11a2e590a8522bf361d68b9e96c4b4e4db8bae78594b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-operations-to-make-network",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/03. Number of Operations to make Network.cpp",
        "hash": "0adeb845ec9af06c5d153cb90ec62019ad46e6f3a570b64eda32c738b58b05cd"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kruskal-s-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/02. Kruskal's Algorithm.cpp",
        "hash": "559cbcc6354b16f5585f5f33b66fcc2439c6870c9654b795f228989e8798fb73"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "most-stones-removed",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/5. MST Problems/04. Most stones removed.cpp",
        "hash": "81572aa6070e88c19fda58ddb4694ea4fcddec61e87513f6f870cd35625d3e77"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-city-with-smallest-number-of-neighbours",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/10. Find city with smallest number of neighbours.cpp",
        "hash": "eeabbde32053b9b44e9b9d73ec9a351b3317c50588b691116ee0faa381f3f992"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-ways-to-arrive-the-destination-with-minimum-distance",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/11. Number of ways to arrive the destination with minimum distance.cpp",
        "hash": "53004d80a7637454e2bb08fbee1d12e8ae1a1a419c919165b5be593da125fa73"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "cheapest-flights-with-k-stops",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/06. Cheapest Flights with K stops.cpp",
        "hash": "320143ea2f1cf665f790c877c2e2e4a4576054957b49fa41943ca86f6351e19e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bellman-ford-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/08. Bellman Ford Algorithm.cpp",
        "hash": "ec2e7df9769f6cdbb5bf162b07a1f4933c2e3394837b662a9a1f9a8d44c137ce"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "network-delay-time",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/07. Network Delay Time.cpp",
        "hash": "8ee6a0d0b487208907556a66b059e11093c4ede37e5ac5d620deeac33c595845"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "shortest-path-in-undirected-graph-having-unit-distance",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/01. Shortest path in Undirected Graph having unit distance.cpp",
        "hash": "d8c3589b63d53a244bc8261c067682e99b772acc21793e6086659a88d10620c0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "path-with-minimum-effort",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/05. Path with minimum effort.cpp",
        "hash": "7b2a4db63e32b78ef1d7d9365d80f516fad765cbc9f6847cce0ab74477cfab7b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "shortest-path-in-dag",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/02. Shortest path in DAG.cpp",
        "hash": "d97ecff64510d7a926c819732f030f3b5574314f4f642b547a7bb7bfab9380bf"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "floyd-warshall-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/09. Floyd Warshall Algorithm.cpp",
        "hash": "807643c9d948b4e22d0f1edafdeb7011b450b9f9ab06e056e1de7e1782d08b7d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "shortest-path-in-binary-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/04. Shortest Path in binary matrix.cpp",
        "hash": "ebfdfc7dc8b4c8e5f5dda41dac254d141c925d398d0fd5dfb01ec434a500d423"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "dijkstra-s-algorithm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/13. Graphs/4. Shortest Path Problems/03. Dijkstra's Algorithm.cpp",
        "hash": "06a8c3538e439a11f3fcc39d715b8566ea117f245210402f0a203c46bda41587"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-in-rowwise-sorted-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/2D Arrays/3.Search_in_rowwise_sorted_matrix.cpp",
        "hash": "84f72aa8ab3c9687cf6ebb06d0b9e391a7debfaa2893001719b88f1938038a99"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "matrix-median",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/2D Arrays/5.Matrix_median.cpp",
        "hash": "7b4172d84780e20b656b4455b0bca251f44cdac2ccf7340b1cec3576fefe37bc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-in-sorted-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/2D Arrays/2.Search_in_sorted_matrix.cpp",
        "hash": "4e805667baf77896380a938cb18fe5148c7e51999f773db3f71138c9dacdab3c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "row-with-maximum-number-of-1-s",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/2D Arrays/1.Row_with_maximum_number_of_1's.cpp",
        "hash": "8c4480e5baf799e060408f3a04c481197cbda277b842f872c339ed922eedeb0e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "peak-element-in-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/2D Arrays/4.Peak_element_in_matrix.cpp",
        "hash": "1a1177f0d6fe598d405f2d1aef617ce8079fa56f05bf946c0e6343f8cefe860f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-peak-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/08.Find_peak_element.cpp",
        "hash": "061c8419ec5124d4cba922bb19bf3dd9447773d9f8f2dd26719082e0500a3e09"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-lower-bound",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/02.Implement_lower_bound.cpp",
        "hash": "dd7fa0f0de8fdee95a65da504f8e78b723e033c878ef2715c14429d2b8b1baee"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-occurences",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/07.Number_of_occurences.cpp",
        "hash": "a4f6c985420e52dd0e45202ffd34b54ce1e4cd2500279db20da7a4b0b2ad4e8a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-the-minimum-element-in-sorted-rotated-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/11.Find_the_minimum_element_in_sorted_rotated_array.cpp",
        "hash": "b9c7c928d4ca32e8bbd4acf44f24faa36dd87ce666ccdfc4588723a501329dd7"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-if-array-is-sorted",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/05.Check_If_array_is_sorted.cpp",
        "hash": "68b24e8067b159a74889c980810172774a07c3f91b4d19955c8251bd25121116"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-single-element-in-sorted-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/12.Find_single_element_in_sorted_array.cpp",
        "hash": "dc72dc8335d76d0c41a5495ef36876eccf8725f4d4f85900acf7810fc619e3aa"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-how-many-times-array-is-rotated",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/13.Find_how_many_times_array_is_rotated.cpp",
        "hash": "a9d68187e1c8de3381d5603dcc816ca72a28a3fde597ac835cb92f4ded9f8f5e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "first-and-last-position",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/06.First_and_last_position.cpp",
        "hash": "d8f82a0069c7a74bb791dabea97a596fbb37351f86affeeec8f214a334be4cea"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-x-in-sorted-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/01.Find_x_in_sorted_array.cpp",
        "hash": "3f83fb6afb5d2af5edce488a51ed8881a1a34d47c34921baf0f4babc2c1933d2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-insert-position",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/04.Search_insert_position.cpp",
        "hash": "f0470b72d91f4ea07631f88a7fb8deae5d78acd2934dc8e6281c9e926e61f47a"
      },
      "python": {
        "id": "step_04_-_binary_search_search-insert-position",
        "file": "Step 04 - Binary Search/SEARCH-INSERT-POSITION.py",
        "hash": null,
        "title": "Search Insert Position",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "matched"
    },
    {
      "key": "implement-lower-upper-bound",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/03.Implement_lower_upper_bound.cpp",
        "hash": "271efcfad4cd29020408a437919c9b2b076f82add2504dfb8a221eaa08002980"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-in-rotated-sorted-array-with-duplicates",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/10.Search_in_rotated_sorted_array_with_duplicates.cpp",
        "hash": "584fd4d24bc150b1bd93eaef7709179618a7aae7fa5d7902e4f01d6b0088d8ed"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-in-rotated-sorted-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/1D Arrays/09.Search_in_rotated_sorted_array.cpp",
        "hash": "045b598f8ce56ccee9b3631351ce8e663db97f393e830ae575f2d10ad3d2ea7a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-smallest-integer",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/05.Find_smallest_integer.cpp",
        "hash": "9fa807492d783d96a3a7ef308b28af89f180ce15580cd132860b14d6c37dbf76"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "square-root-of-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/01.Square_root_of_number.cpp",
        "hash": "e9ae8e4d052e5a6abe7535a2f8e55e066904d4d39ba19324b0185c2348179189"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "book-allocation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/09.Book_allocation.cpp",
        "hash": "26ad858ddc77d16e66a5ffce730dc941b9015d315effb51ad3f4c9595080c08f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "split-array-largest",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/10.Split_array_largest.cpp",
        "hash": "04dbe78a895cc8ac71b723e44ab3b7189d8dd33b816d51b9927d96aa345c9255"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "nth-root-of-integer",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/02.Nth_root_of_integer.cpp",
        "hash": "8418e13bbc298b46f3f25fdf711178b4918527601757b15b1a3a8852683435f1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kth-missing-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/11.Kth_missing_number.cpp",
        "hash": "de3882768fee3528cd0f684211361c465610b3890a27be149703ef3b9fbee3f6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "koko-eating-banana",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/03.Koko_eating_banana.cpp",
        "hash": "d42f59789104edeee11542b662e573b3fc9f9d4e2de704cb32fdb258580f62a2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "median-of-two-sorted-arrays",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/13.Median_of_two_sorted_arrays.cpp",
        "hash": "5803f0677256810c01b9693f428a67128fe53f1890b43367ec9e51106e09b664"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "capacity-to-ship-packages",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/06.Capacity_to_ship_packages.cpp",
        "hash": "ea63d5131f241c39634ebf3ab2646123f8e20b91e5e2793c21408501090f7996"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-days-to-make-boquets",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/04.Minimum_days_to_make_boquets.cpp",
        "hash": "a7230230971bdc9f1dd1d2b6c4cf1c7ac0374778c53f425995d2eca52c89464e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "aggresive-cows",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/08.Aggresive_cows.cpp",
        "hash": "7bb5c2708bf49e0013c5c8a686c7092ff7d8382d07285a8019bab0e8a2bf6fcc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kth-element-of-two-sorted-arrays",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/14.Kth_element_of_two_sorted_arrays.cpp",
        "hash": "3c50eebc977454f5e5f4e459e34c9024b6fce1cbf0a2e9a2b93af584729e4877"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "gas-station",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/02.Binary Search/In Search Space/12.Gas_station.cpp",
        "hash": "9df9952bb8667a25372fe60447002c1e5cfa4da9e024ff60b2684ed468dab3f2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-the-number-of-substrings-with-k-unique-characters",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/05.Count_the_number_of_substrings_with_k_unique_characters.cpp",
        "hash": "06c1d90b60c86519238f41748e63a7c0598ba3722736e945d136d847d5e345e6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "roman-to-integer",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/03.Roman_to_Integer.cpp",
        "hash": "c92747343d8422ec3cb4438828a1284ff581b20f534d0b441b4a4a6d69e5c789"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-palindromic-substring",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/06.Longest_palindromic_substring.cpp",
        "hash": "ce65568fb70623404e8388a3ca7a7e8478e0c25ab259bc9556b273369963d89f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sort-characters-by-frequency",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/01.Sort_characters_by_frequency.cpp",
        "hash": "9ea180f9633b360091db7d6dacf8c88094de3a26e7aa423fd3333fd8c12a563c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sum-of-beauty-of-all-substrings",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/07.Sum_of_beauty_of_all_substrings.cpp",
        "hash": "a7d6369ce7f86eeb2eeaca75f42ec48cdb68d4dfb96d67a43aa2b7838f3e7eef"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "max-nesting-depth-of-parenthesis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/02.Max_nesting_depth_of_parenthesis.cpp",
        "hash": "0eddb201a3e2026efdee666e89417f87986be335c9abdd7392fae72154edeec2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-atoi",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/2.Medium/04.Implement_atoi.cpp",
        "hash": "517d21f5aac4908fd99dc94e8be9943adffc9ab872a5f667b1f0cdf4ccd9b9fb"
      },
      "python": {
        "id": "step_05_+_18_-_strings_implement-atoi",
        "file": "Step 05 + 18 - Strings/IMPLEMENT-ATOI.py",
        "hash": null,
        "title": "Implement Atoi",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "largest-odd-number-in-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/03.Largest_odd_number_in_string.cpp",
        "hash": "bed1101e494607ba8438779bbf6aca5b56a4a158f75f631e3e88f1927d79bec1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-for-rotated-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/06.Check_for_rotated_string.cpp",
        "hash": "1427a421990ded22d85d0722a6fefe25d137837e27db1d0622cb5382b24d0dda"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-common-prefix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/04.Longest_common_prefix.cpp",
        "hash": "180ea066aadb8ea7cc5f7139058b33924321cdafb6ef5c21fc47588feb7d2f9f"
      },
      "python": {
        "id": "step_05_+_18_-_strings_longest-common-prefix",
        "file": "Step 05 + 18 - Strings/LONGEST-COMMON-PREFIX.py",
        "hash": null,
        "title": "Longest Common Prefix",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "remove-outer-parenthesis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/01.Remove_outer_parenthesis.cpp",
        "hash": "b51bf9ed83adbd27ac050395a3b4310c3089a6aa208040182c39588df2fb8bd8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "isomorphic-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/05.Isomorphic_string.cpp",
        "hash": "7a01b5384e5fcaed6d1f11daca5d72ef9fc2a9c60c7d6a4209e30d713dc9fc3d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-words-in-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/02.Reverse_words_in_string.cpp",
        "hash": "faa8d95ce9afe6733b8cc392b3c996d045d5a1279d7e68b782daabb37def8f6c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "valid-anagram",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/03.Strings/1.Easy/07.Valid_anagram.cpp",
        "hash": "693e5885bd3d84ceeb1b0f7c7972be0e1a246ab6ab2501da50b5441254504b91"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "inserting-node-to-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/1. Single Linked List/02.Inserting_node_to_linked_list.cpp",
        "hash": "8364e878b709f0608c8ecbda2ad7512992cbf805454929616a781bda7531601a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "deleting-node-in-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/1. Single Linked List/03.Deleting_node_in_linked_list.cpp",
        "hash": "0cb382a8958de76ae4e749fd3c761781164b57b76b85731ed7bcb9681245dc12"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "intro-to-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/1. Single Linked List/01.Intro_to_linked_list.cpp",
        "hash": "730d5c8e5841604d4d2a48cb8eadfc50872ab02ddc786be4d01ca717dd06dcea"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-element-in-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/1. Single Linked List/05.Search_element_in_linked_list.cpp",
        "hash": "3d18515842d9f4bde8c06e799bc98381119f8206bb5ae35330c2d4cafa519a33"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-the-number-of-nodes-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/1. Single Linked List/04.Count_the_number_of_nodes_linked_list.cpp",
        "hash": "e4afdcf963bb4709113f7af384612cf7d4215a3383a5658f3a85ea04c0c724d3"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "remove-duplicates-from-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/4.Medium Problems of DLL/03.Remove_duplicates_from_dll.cpp",
        "hash": "19a148cbe78365651b6f187ad03a0ea6079205287ef031cc69d742c0f9784c19"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "delete-nodes-from-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/4.Medium Problems of DLL/01.Delete_nodes_from_dll.cpp",
        "hash": "e42a3cfae1b2c7c230c0a7a9adac4c925421289b740308b39afba1b37460fae5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "pair-sum-in-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/4.Medium Problems of DLL/02.Pair_sum_in_dll.cpp",
        "hash": "68e05d8dab8b07e63220b5174fd498dbffd09ef9711cfb2b19a6e4d7a6128091"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-k-node-in-groups",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/5.Hard Promblems of LL/01.Reverse_k_node_in_groups.cpp",
        "hash": "3c84e9b602ba572232783ee79c57a25a90c3929101d927241df7b4fa14d27eda"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rotate-ll-k-times",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/5.Hard Promblems of LL/02.Rotate_LL_k_times.cpp",
        "hash": "0be9dcf59006eb7445015dfcce32aa7383eca68140d955e3e332ada7733c9d94"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "copy-ll-with-random-pointers",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/5.Hard Promblems of LL/03.Copy_LL_with_random_pointers.cpp",
        "hash": "e9b72074faf5d99eded4d81deba36b941ea53aa3f1516460a2fb7f9385a1a689"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "flatten-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/5.Hard Promblems of LL/04.Flatten_LL.cpp",
        "hash": "4aa3199fac2c54ba3bd49a5591932bb5fba5ba1342b512c8a42bea7dfbb8b568"
      },
      "python": {
        "id": "step_06_-_linked_list_flatten-ll",
        "file": "Step 06 - Linked List/FLATTEN-LL.py",
        "hash": null,
        "title": "Flatten Ll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "start-of-cycle-in-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/04.Start_of_cycle_in_LL.cpp",
        "hash": "d9fd4bb66dd0483fc6cc9419bdcb61d6311db706af04c93d3da65edfdaac5b17"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sort-0-1-2-in-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/11.Sort_0_1_2_in_LL.cpp",
        "hash": "f461d6b950020f69a58daffed0066d89f3bfd2524bc9bb58082a18aa1fe95bd1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-for-palindrome-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/06.Check_for_palindrome_LL.cpp",
        "hash": "f0a9ebef76676da11fdb04e30c9bbde2d50e194792948f90ee1840b4c0ab8577"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "delete-mid-of-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/09.Delete_mid_of_LL.cpp",
        "hash": "cea7bb10464ff4674216f6b16ee9061c5d5fdc036af838ccb3a01e2319c39344"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "odd-even-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/07.Odd_even_LL.cpp",
        "hash": "a818584262c9dbeda65a1f9784c5acdcd0c98deda5206ce7097c41c8a979ed19"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "add-1-to-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/12.Add_1_to_LL.cpp",
        "hash": "697c79d20053e45a3055ed9221b700ef3bae5937d2c64104ad0eb927f9df1df7"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "add-two-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/13.Add_two_LL.cpp",
        "hash": "058dc2789c7d10bf79f393e11a8464475fed871948df9c355e839d99cc3b1814"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "delete-nth-node-from-back",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/08.Delete_nth_node_from_back.cpp",
        "hash": "7d281128ed7c228967f85ba6fc8ac0e54124d8b04e1e38946da42c9c5adb50b5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-mid-of-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/01.Find_mid_of_LL.cpp",
        "hash": "2f08a39f272cdb57bdda981d54dd1cfbce0a0ada153f20ed8c62a316bddade7c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/02.Reverse_LL.cpp",
        "hash": "8db860b9b04fc59d6185608e8a25f5084d768188ff251a6756c89d3eee4024b3"
      },
      "python": {
        "id": "step_06_-_linked_list_reverse-ll",
        "file": "Step 06 - Linked List/REVERSE-LL.py",
        "hash": null,
        "title": "Reverse Ll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "count-nodes-in-loop",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/05.Count_nodes_in_loop.cpp",
        "hash": "c3170a9bbf2f30f6e96b93ee37f5a9cda93a0677cb86d84d769d263184516d46"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "detect-loop-in-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/03.Detect_loop_in_LL.cpp",
        "hash": "c0d365c94ca02a5146da45d5dd0a695eff95210d1ba92a684ce0195efcf20e13"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sort-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/3.Medium Problems of LL/10.Sort_LL.cpp",
        "hash": "59f0d51c4a857c2c35edad1713cc3f3475c2452c1673184a99648e4ffe9508d0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "delete-node-in-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/2.Doubly Linked List/03.Delete_node_in_DLL.cpp",
        "hash": "318ee6d73881886cafedc458ef6a1eb582a9ec21d8f0cbb750286604fef4a9ba"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "reverse-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/2.Doubly Linked List/04.Reverse_DLL.cpp",
        "hash": "b8a85c92199d7ec045378dcb9e412f29f69e246283af50d958a9e399438b8893"
      },
      "python": {
        "id": "step_06_-_linked_list_reverse-dll",
        "file": "Step 06 - Linked List/REVERSE-DLL.py",
        "hash": null,
        "title": "Reverse Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "matched"
    },
    {
      "key": "introduction-to-double-ll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/2.Doubly Linked List/01.Introduction_to_Double_LL.cpp",
        "hash": "1c3ea25dc5f0ca6a9e0d5719e402822d59a34f86561d494d2c9fcbc443014095"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "insert-node-in-dll",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/04.Linked List/2.Doubly Linked List/02.Insert_node_in_DLL.cpp",
        "hash": "6e0c27be9606ef4d2dd9341f1a60259d4ac3b712108b4a0f6f3ce3a88cf0eb8a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-the-number-of-substrings-with-exactly-k-unique-characters",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/2. Hard Problems/02. Count the number of substrings with exactly K unique characters.cpp",
        "hash": "c93fb4dc1979e45c4aa4876dc659e391d2faa5ccfdb046c3fac21ddaf1fe82ab"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-window-substring",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/2. Hard Problems/03. Minimum Window Substring.cpp",
        "hash": "1db8a64f683120416890a4cab7b02b598ea873bb0458ad9212f0fff6f496ec47"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-substring-with-at-most-k-unique-characters",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/2. Hard Problems/01. Longest Substring with at most K unique characters.cpp",
        "hash": "9b66466a5d20eb242bbfaf69852701ebb7c30b5472be7dff3305f6fceee51fb7"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-substrings-containing-all-3-characters",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/07. Number of Substrings Containing all 3 characters.cpp",
        "hash": "1e0915d7444217b2bfc0917a1abab7e97387d2a8d49b3c910a4b6c5266a3b822"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "fruit-into-baskets",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/03. Fruit into Baskets.cpp",
        "hash": "edfd2bea6fe524e0401756242a28321b268392b3d8eb61a06d5dad656d13bd1f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-repeating-character",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/04. Longest Repeating Character.cpp",
        "hash": "57064ee21805dd82670abd90e10502ce0e9194bac18f6ef96f837c526340bdf9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "maximum-points-you-can-obtaln-form-the-card",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/08. Maximum Points you can obtaln form the card.cpp",
        "hash": "e9129351b5ccf98f37910cfef46c82ded5f866a78d0aca9c336d371da6462db8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "max-consecutive-1-s",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/02. Max Consecutive 1's.cpp",
        "hash": "e79ca98ba8ae35f7ef2c553660104fd7f5d846cdcf7d2aa4a8ff2762b03ed22a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-the-number-of-nice-subarrays",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/06. Count the number of nice subarrays.cpp",
        "hash": "f7de087006557716378821efc420ce4902ec1477832ea9111d10cc81439e5647"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "binary-subarrays-with-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/05. Binary Subarrays with Sum.cpp",
        "hash": "2dd796a0aff5666914e978196b242dc8d926dba3e072ee23afaa94d0ea1adfa5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-substring-without-repeating-characters",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/08. Sliding Window/1. Medium Problems/01. Longest Substring Without Repeating Characters.cpp",
        "hash": "d55ddffe857b082f44fcaea1afcf0289e814f77351c13f30330d71620ef24990"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "stock-span-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/4. Implementation/02. Stock span problem.cpp",
        "hash": "e241384f4cea4a7f6afc8d5f1b033905ff71f1de7884b37392f4d6f4388aa8ba"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "celebrity-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/4. Implementation/03. Celebrity Problem.cpp",
        "hash": "7767fd06a9e50b8f1f1e767bb589535a1b9ec3483986d44e7d1835ec6d1d4288"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sliding-window-maximum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/4. Implementation/01. Sliding window maximum.cpp",
        "hash": "c2fe67548913b4f7300b962245d66d82ae25b259969bf9ed5dd846fe9de10be4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "lru-cache",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/4. Implementation/04. LRU Cache.cpp",
        "hash": "e46412f9ff1a5ab2e9e6077ca6a72f14666d846759b20fdd711343448871a627"
      },
      "python": {
        "id": "design_based_lru-cache",
        "file": "Step 06 - Linked List/DESIGN BASED/LRU-CACHE.py",
        "hash": null,
        "title": "Lru Cache",
        "difficulty": "Easy",
        "category": "DESIGN BASED"
      },
      "patterns": [
        "General"
      ],
      "match_status": "matched"
    },
    {
      "key": "valid-parenthesis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/06. Valid Parenthesis.cpp",
        "hash": "c85bc920cdee2168a48359fee3242a4d9963bf8f1ec39952925f894d8ad88aef"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-min-stack",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/07. Implement min stack.cpp",
        "hash": "83cc96747b58f9f129e0dafd1024583b693710d3f6809b04b16ce5d6e471fc88"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-queue-using-stacks",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/04. Implement queue using stacks.cpp",
        "hash": "e027f570da374df74446c22f9b258a5f5486ad7e48ca2760a281fd63c7cf3b4b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-stack-using-queue",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/03. Implement stack using queue.cpp",
        "hash": "9bf46b2fd814f15cf05317d4a4b29e56cf462089d7b9aa8b002cae60640fd91f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-stack-using-linked-list",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/05. Implement stack using linked list.cpp",
        "hash": "0e9ffde7fb6cafa0b1ee7f9fd8e26499ac15d10d6b30afb6f0085c7f07c79cab"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-stack-using-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/01. Implement stack using array.cpp",
        "hash": "9620d3a5e7412cb75568651973c502f2e2e773f843060f8e0049f678beef051e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "implement-queue-using-array",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/1. Learning/02. Implement queue using array.cpp",
        "hash": "b3436a51e8b56449979e78ad825253b962d44272bea908e0ada5a4a888a70963"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "prefix-to-postfix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/04. Prefix to postfix.cpp",
        "hash": "047012e0ad994692fb138668e319356b2f699289245a1b04bea1e909489af2e3"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "postfix-to-infix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/05. Postfix to infix.cpp",
        "hash": "8da44c206d19b9da81591b7f00c69635b9328c55a450942fae1e845c3b6d67e5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "infix-to-postfix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/01. Infix to postfix.cpp",
        "hash": "2443c25af85763fb7cb76865e4f6e5b5846a07f7edf0ef6451830129ede04ac9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "postfix-to-prefix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/06. Postfix to prefix.cpp",
        "hash": "498c6cca65adb10691345be9db7205564215685f1add17de35c33998688c36fe"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "prefix-to-infix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/03. Prefix to infix.cpp",
        "hash": "2206c73d7a547a92c7bb504c3aed03cd5ad9acad338c23deab25d7a0aa05e4c6"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "infix-to-prefix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/2. Infix, Postfix, and Prefix/02. Infix to prefix.cpp",
        "hash": "c5aefb8809deec2c262a64cf04c509520cc7a4652b6366d73bfaa6d3563a285e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sum-of-range-of-all-subarray",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/06. Sum of range of all subarray.cpp",
        "hash": "5032ca878c09813bd73bc98da4b3f63c076a5c3765d828460650494bdf2a3922"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "trapping-rainwater",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/04. Trapping Rainwater.cpp",
        "hash": "34b7a8ff4b399e838c65c1ac5b85b1ffcc459a811e8cb08c61e8319dbcca40ae"
      },
      "python": {
        "id": "step_09_-_stacks_queues_trapping-rainwater",
        "file": "Step 09 - Stacks Queues/TRAPPING-RAINWATER.py",
        "hash": null,
        "title": "Trapping Rainwater",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "matched"
    },
    {
      "key": "maximal-rectangle-in-binary-matrix",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/09. Maximal Rectangle in binary matrix.cpp",
        "hash": "b367249a325891e2f96aeeb6c430a765d053f3d9fd2b1723fe870f939cd9ea1a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "asteroids-collision",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/10. Asteroids Collision.cpp",
        "hash": "89875020e76fab127c4194c8162a22709e016f8ec60b7572ce2bffd37bbae9fb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "next-greater-element-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/02. Next Greater Element 2.cpp",
        "hash": "243261c17fda6b1a90a959a2e3f80f287f0c1bc9bb35c5c7b3debea12b42675a"
      },
      "python": {
        "id": "step_09_-_stacks_queues_next-greater-element-2",
        "file": "Step 09 - Stacks Queues/NEXT-GREATER-ELEMENT-2.py",
        "hash": null,
        "title": "Next Greater Element 2",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "matched"
    },
    {
      "key": "largest-rectangle-in-histogram",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/08. Largest Rectangle in Histogram.cpp",
        "hash": "d730bad6f281de31b3ecbc48066b6997e83c2c5b17a7aa71fad5dd3d4e12833f"
      },
      "python": {
        "id": "step_09_-_stacks_queues_largest-rectangle-in-histogram",
        "file": "Step 09 - Stacks Queues/LARGEST-RECTANGLE-IN-HISTOGRAM.py",
        "hash": null,
        "title": "Largest Rectangle In Histogram",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "matched"
    },
    {
      "key": "remove-k-elements",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/07. Remove K elements.cpp",
        "hash": "5b7166b2e1dde3dc3b1b5ded7121b8f3b169ebbfb909659a36a11f9a1b9b9bb4"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "sum-of-subarray-minimum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/05. Sum of subarray minimum.cpp",
        "hash": "eef18e815c2fdcdf747f290e828262841b8670e36e86db148dae0fff16f179e2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "next-greater-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/01. Next Greater Element.cpp",
        "hash": "5a54a09d1a4f9a399d028abdf180e2e8785036a71590f138aeac3679d575380b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "previous-smaller-element",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/07.Stack and Queues/3. Monotonic Stack and Queue/03. Previous Smaller Element.cpp",
        "hash": "2bf1bfc8165390912d868c4ea0ee146a19e4bec7c95a1d37c7f68bfd1bacf7cc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "two-sum-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/10. Two Sum in BST.cpp",
        "hash": "dfb7cd881e070bb30495c1c25f25d6c6bf55bf2df5ebf74b844bdf8bdaa17a1b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "insert-into-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/03. Insert into BST.cpp",
        "hash": "22a253ededec76abc5fd9af289f6fbf2243a85d9b8b8fafc633bc48adbb85dce"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "recover-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/11. Recover BST.cpp",
        "hash": "94045e1704e1393d94fbddbd6926f709c0f0087ddb9e568627245a91b25260f3"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bst-iterator",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/09. BST Iterator.cpp",
        "hash": "7eefa1d08f5e713156d7546681fb63ef95e8953d16a0b63ea0f14b9b327032ca"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "validate-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/06. Validate BST.cpp",
        "hash": "598775db5995bd99291fb17a720440dd2948f506a34799ae59f983de2cf30148"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_validate-bst",
        "file": "Step 13 + 14 - Trees + BST/VALIDATE-BST.py",
        "hash": null,
        "title": "Validate Bst",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "largest-bst-in-binary-tree",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/12. Largest BST in Binary Tree.cpp",
        "hash": "a57d34c029be974f08914cacb75d57c2a44fcfd4821c6f38a068a829413a4200"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "build-bst-from-preorder-traversal",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/08. Build BST from Preorder Traversal.cpp",
        "hash": "d27124507b7b794c42c65f72faf963d4899840850d29cbbe6c32016e6d28efef"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "lca-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/07. LCA in BST.cpp",
        "hash": "2177cc445bc5241c0192c326d708864eaa86095ea220fab74897878712a71c02"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "floor-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/02. Floor in BST.cpp",
        "hash": "2094826969bea13af305eeb396b2ef1e3f861c6cd0e145ee4bb826296108ef42"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "kth-smallest-element-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/05. Kth smallest element in BST.cpp",
        "hash": "61e43b324b7eb2af3d7fdfb39a7b2c3c9e8772da51843dc2d0befa9de5056e78"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_kth-smallest-element-in-bst",
        "file": "Step 13 + 14 - Trees + BST/KTH-SMALLEST-ELEMENT-IN-BST.py",
        "hash": null,
        "title": "Kth Smallest Element In Bst",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "delete-from-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/04. Delete from BST.cpp",
        "hash": "6d5aeed25a435b361325caecbd015c89d13daefd320ca2a83e7fbbc3109926ca"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "ceil-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/2. Practice Problems/01. Ceil in BST.cpp",
        "hash": "19f225993691220ca4b5722d7a2148dab70bedf56269624ba65a5aec9f9694ac"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "intro-to-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/1. Concept/01. Intro to BST.cpp",
        "hash": "1043acc6363a47c747911d0fd86add19c1b5bfe0ebbe579015e2ce08551b10c0"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-value-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/1. Concept/03. Minimum value in BST.cpp",
        "hash": "42d401330221d4eb34220972a031cb511666a252da8fff8866f810fc5d7a64a1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "search-in-bst",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/12. Binary Search Trees/1. Concept/02. Search in BST.cpp",
        "hash": "937cb1dc8983128cb82f182b75441875416482d4bc180ba42dd2b0b127454fe8"
      },
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_search-in-bst",
        "file": "Step 13 + 14 - Trees + BST/SEARCH-IN-BST.py",
        "hash": null,
        "title": "Search In Bst",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "matched"
    },
    {
      "key": "assign-cookies",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/1. Easy/01. Assign Cookies.cpp",
        "hash": "d8379651774b6d592557e7ec7a0e662262818c7400ada54679b3d88b2db2b1a5"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_assign-cookies",
        "file": "Step 12 - Greedy Algorithm/ASSIGN-COOKIES.py",
        "hash": null,
        "title": "Assign Cookies",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "valid-parenthesis-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/1. Easy/04. Valid Parenthesis String.cpp",
        "hash": "bdad7531c1cba0c28ec7ba73762f923473a6a5ed46cc34a97d8ab8b0b43c9174"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "lemonade-exchange",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/1. Easy/03. Lemonade Exchange.cpp",
        "hash": "aca5ee1c5cf83b2b2c856b3b7db4fd176578032d26f660c31c21166a90b85360"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "fractional-knapsack",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/1. Easy/02. Fractional Knapsack.cpp",
        "hash": "a7b9dfd2e9353154abe2ff5ab725569d3031986e7ec12d7ce405a7c3c51825fd"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_fractional-knapsack",
        "file": "Step 12 - Greedy Algorithm/FRACTIONAL-KNAPSACK.py",
        "hash": null,
        "title": "Fractional Knapsack",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "jump-game-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/03. Jump Game 2.cpp",
        "hash": "88365bceacd97480cf4702d7597dbf2fb920cbbbc4a86ebfdf076f35ae53c8bb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "insert-interval",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/07. Insert Interval.cpp",
        "hash": "806b9b9cf7c6bc2a02a8398ba26e148dd48fc6e7b5d19f5c987a365e406681bb"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_insert-interval",
        "file": "Step 12 - Greedy Algorithm/INSERT-INTERVAL.py",
        "hash": null,
        "title": "Insert Interval",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "job-sequencing-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/05. Job Sequencing Problem.cpp",
        "hash": "222cee2b5771f2663fa456454d4af4ae23445667827391d55cd10170c10eb014"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "jump-game",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/02. Jump Game.cpp",
        "hash": "1fb28391a1927d9e1ce33a8d8feb9ed446089b9210950c0c64042a0717937bed"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-platforms",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/04. Minimum Platforms.cpp",
        "hash": "c0ecd2947b2318e1b144720e1ef8ddb857f8721888f3a7b5af237bf521de631b"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "n-meetings-in-one-room",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/01. N Meetings in one room.cpp",
        "hash": "b441ebcba0eaa2989f9d8d9eadc962408a1667fdcc02960241886bcd8fd60c11"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "non-overlapping-intervals",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/08. Non Overlapping Intervals.cpp",
        "hash": "7ab53d651a66328023aa47f400d5d909f076d3e03c0c518493d979cb06c5913e"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_non-overlapping-intervals",
        "file": "Step 12 - Greedy Algorithm/NON-OVERLAPPING-INTERVALS.py",
        "hash": null,
        "title": "Non Overlapping Intervals",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "candy",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/10. Greedy Approach/2. Medium/06. Candy.cpp",
        "hash": "7ccf02db310244b4138ef834ef871d9326108f5b2da82bc662c1487d92e37de3"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_candy",
        "file": "Step 12 - Greedy Algorithm/CANDY.py",
        "hash": null,
        "title": "Candy",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "unique-paths",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/02. Unique Paths.cpp",
        "hash": "007b9a717a6542f3798cbb2c22b12d54ca6ae395a5832a2cf9cdf7a1fa42f8db"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-path-in-triangle",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/05. Minimum Path in Triangle.cpp",
        "hash": "9c1cb3ca1dad8aaf728cf9697aab3a082fa5649a562639b161f2bf7adcdaf902"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-falling-path-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/06. Minimum Falling Path Sum.cpp",
        "hash": "446ed594ce2d576368b0af62b263e2f962451163dfa636bff3784f359c47f321"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "unique-paths-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/03. Unique Paths 2.cpp",
        "hash": "149976604bbaa19a4190009ab8eedb4e71d715b1f9e5bd5a9352870200e6329c"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_unique-paths-2",
        "file": "Step 16 - Dynamic Programming/UNIQUE-PATHS-2.py",
        "hash": null,
        "title": "Unique Paths 2",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "ninja-training",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/01. Ninja Training.cpp",
        "hash": "f8920b0f63997e25ac3338eb49385f6f2ade6d0b5534de1aeae39d59f45abefc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-path-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/3. 2D DP/04. Minimum Path Sum.cpp",
        "hash": "612836aa38897866e8b84f61e03e8211fa60be2b3995add30720d1f6fa3ce7da"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-increasing-subsequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/7. DP on LIS/01. Longest Increasing Subsequence.cpp",
        "hash": "c136ea59ecb2e676d1ce93d4c646c262db24fc95cb66d6ae0803149c25efac73"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "print-lis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/7. DP on LIS/02. Print LIS.cpp",
        "hash": "202ceacb7d4f01a37ec54c64d770ef18ba9b68110fd513dacfac6fae39cada02"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "largest-divisible-subset",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/7. DP on LIS/03. Largest Divisible Subset.cpp",
        "hash": "9a87366d728f612150a8a533d34fa17e4d7fbbfa16bdb5de49533402790fcb95"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-bitonic-subsequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/7. DP on LIS/04. Longest Bitonic Subsequence.cpp",
        "hash": "d093ed6c0de6ce32f22896207e537b356eb85b1449322aeedba1ae6da633f664"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "number-of-lis",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/7. DP on LIS/05. Number of LIS.cpp",
        "hash": "40a85318a7268b4e2b08b1b052b61fdc465612b9e9fb469ab13c561db006db27"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "best-time-to-buy-and-sell-stock-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/02. Best time to buy and sell stock 2.cpp",
        "hash": "86dd2fc3d35a76e945ffb3e2952b562c5ca52f4620a2896829b7c53e15668c4c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "best-time-to-buy-and-sell-stock-upto-2-transaction",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/03. Best time to buy and sell stock upto 2 transaction.cpp",
        "hash": "090a2770fd4c52d54ef7685737aa54bfd82ad49eda4e8f2d85a68b9984f5f760"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "best-time-to-buy-and-sell-stocks",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/01. Best time to buy and sell stocks.cpp",
        "hash": "3f458c56809d6afc34d9c7d012bc5a5a8a2f55254c991210297c9d5cdc73c3be"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "buy-and-sell-stocks-with-cooldown",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/05. Buy and sell stocks with cooldown.cpp",
        "hash": "0fec48a3beb886031399903ab15129640ae6fdf4b9d8aeafe7ec62282abe148d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "best-time-to-buy-and-sell-stock-uoto-k-transaction",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/04. Best time to buy and sell stock uoto k transaction.cpp",
        "hash": "7a5de9b3c90aa7ac1ec250ab42bc819e61a95d508d0fcd9b5535123456172563"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "buy-and-sell-stocks-with-transaction-fee",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/6. DP on Stocks/06. Buy and sell stocks with transaction fee.cpp",
        "hash": "4972096f111e0eef26dc5497c446d2318e8537cf00605f05c9f6d344b7f66b9a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "partition-with-given-difference",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/05. Partition with given difference.cpp",
        "hash": "d948d675705fc3bcc0a54bc893ec45df4b31820dd319edb623a3913d4387e7fc"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "01-knapsack",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/06. 01 Knapsack.cpp",
        "hash": "9966bb26b21918509fb25628d47d62d8ed6683ec907a451d924520543852483d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "partition-array-in-two-equal-sum-subsets",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/02. Partition array in two equal sum subsets.cpp",
        "hash": "ca5b3c8a15866e9fff5eab64968599925fd864bed2af7b7c90759b263d0b0f74"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "subset-sum-equal-to-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/01. Subset sum equal to k.cpp",
        "hash": "6e9c7e5cdd1a4631dd160e8b622ab3797ae620db3fe233b07c32a21985d06545"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "unbounded-knapsack",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/10. Unbounded Knapsack.cpp",
        "hash": "966e813b0a3e21c4c0145e6544d10c42c27410c5f59ba6a5f9ec7f3ededcbf76"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "target-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/08. Target Sum.cpp",
        "hash": "9b16cd2ba384742586492ed011e862147ab8b8cbd63263275b3a0d4027272c97"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "rod-cutting-problem",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/11. Rod Cutting Problem.cpp",
        "hash": "053ff3e7f3461999f7b83997871990b985cd3cfab466449571cd2a0130fb4fdf"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "coin-change",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/07. Coin Change.cpp",
        "hash": "8f762053ad379764c13c4e193dd16e36178310d0965844846b9e78d6f9451288"
      },
      "python": {
        "id": "step_12_-_greedy_algorithm_coin-change",
        "file": "Step 12 - Greedy Algorithm/COIN-CHANGE.py",
        "hash": null,
        "title": "Coin Change",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "matched"
    },
    {
      "key": "minimum-sum-partition",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/03. Minimum Sum Partition.cpp",
        "hash": "23a8e9c7a085da1c6409e2b8c219968d49692e389cd6c86e24ac2cbf5a9eb75e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-number-of-subsets-with-sum-k",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/04. Count number of subsets with sum K.cpp",
        "hash": "88e687c145f01a0eaa723e15b1b8741f5c7859a06eea3e616cf6ad6053f3eda8"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "coin-change-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/4. DP on Subsequences/09. Coin Change 2.cpp",
        "hash": "c6b7d4757835a45c7949ce2d0a9dcc699d5455a39771cc7622e42985a09c6cac"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-palindromic-subsequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/04. Longest Palindromic Subsequence.cpp",
        "hash": "dbf123d77b5126916fc0ad97d23d5c7a3ee5c647ea5b2a91f48e71861fdabd35"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-steps-to-make-other-string",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/06. Minimum steps to make other string.cpp",
        "hash": "f619debdbda5c5bd40d6f77caa4ad24e52d08e6c7cfc3ec93d1d05f4d9483467"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "wildcard-matching",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/09. Wildcard Matching.cpp",
        "hash": "07047e8807789e608866710889e1e35414a3b988351b9f8fa6797d1b2f439036"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_wildcard-matching",
        "file": "Step 16 - Dynamic Programming/WILDCARD-MATCHING.py",
        "hash": null,
        "title": "Wildcard Matching",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "longest-common-subsequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/01. Longest Common Subsequence.cpp",
        "hash": "b9c075fef1ee51a5be4e25c87542c51db19a73f0e51cd90919818eb852c471bb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "shortest-common-supersequence",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/07. Shortest Common Supersequence.cpp",
        "hash": "7f24f97505c9ed6c6f73a349b3e9a66bed538dffc827f867355949e06c43f176"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "print-the-lcs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/02. Print the LCS.cpp",
        "hash": "5b2779e2dce056c6af9164ccfbd35c13777ba783203c9be6cef86924ac574667"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "distinct-subsequences",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/08. Distinct Subsequences.cpp",
        "hash": "4ee6751ab8e0f67d3fd7c17db321ac97ce93310016f952a424533bf576ebef28"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "longest-common-substring",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/03. Longest Common Substring.cpp",
        "hash": "a3927cde692e0e4554ee99ac05e4c2c0fa42d7665a5ca910ffe62f6ca2d68e65"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_longest-common-substring",
        "file": "Step 16 - Dynamic Programming/LONGEST-COMMON-SUBSTRING.py",
        "hash": null,
        "title": "Longest Common Substring",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "minimum-steps-to-make-string-palindrome",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/5. DP on Strings/05. Minimum steps to make string palindrome.cpp",
        "hash": "10c45b2604c9b0d4ee80342d1ab924d3bf1e1f097b6f8922dbde4160133836a2"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-square-submatrices",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/9. DP on Squares/02. Count square submatrices.cpp",
        "hash": "31121147569e72c8c59fce9b9ed234cc6d1bd2c04d964c9e20e22798584ba0b5"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "maximal-square",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/9. DP on Squares/01. Maximal Square.cpp",
        "hash": "640129b3874b40ca1b2e754554db66112c7df93590b49376a08c638de6f7dd6f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "burst-ballons",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/8. DP on Partition/03. Burst Ballons.cpp",
        "hash": "90df33c29ccb7f0980b9ebf69b00a675ddd58daa0623200afa443dfa2282e91f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "partition-array-for-maximum-sum",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/8. DP on Partition/06. Partition array for maximum sum.cpp",
        "hash": "1b08673c0640d6d3f48bc6602857915eaf2c58f30f49d1ccf3d97567e0e5c66a"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-cost-to-cut-stick",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/8. DP on Partition/02. Minimum cost to cut stick.cpp",
        "hash": "fe17c16566f3603b6c909d91bc8c2505f39147eb2fadc6e13944214be705e5ac"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "palindorme-partionting-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/8. DP on Partition/05. Palindorme Partionting 2.cpp",
        "hash": "ec95eb251d01efe03ba12e33c87713befeaf2199093d7b8c61584d12a1afc153"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "mcm",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/8. DP on Partition/01. MCM.cpp",
        "hash": "46411be9d0e3c2e2c366b0bee663a2eebea9dc23bfa418fc150ac5ced2cf3dad"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "find-the-nth-fibonacci-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/1. Intro to DP/01. Find the nth fibonacci number.cpp",
        "hash": "82ad6ea5e1c5dcc4e82028017abf4d5fe3aef6a6a43c9dfa2a0d1d6520174aa9"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "frog-k-jumps",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/2. 1D DP/03. Frog K Jumps.cpp",
        "hash": "c17bd97ae6abdd3d66edfda11f1af5187fe088404e40225874efb81a82f6e509"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "climbing-stairs",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/2. 1D DP/01. Climbing Stairs.cpp",
        "hash": "374ca30c69cfe1d75c5ed155402c033b11aa101537f5df9bad63c4b61af2a296"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_climbing-stairs",
        "file": "Step 16 - Dynamic Programming/CLIMBING-STAIRS.py",
        "hash": null,
        "title": "Climbing Stairs",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "frog-jump",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/2. 1D DP/02. Frog Jump.cpp",
        "hash": "649d0279e8e4e3e114609e5fd2ebfa83e0ea6b25a76fd99f58326706dd7001e4"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_frog-jump",
        "file": "Step 16 - Dynamic Programming/FROG-JUMP.py",
        "hash": null,
        "title": "Frog Jump",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "house-robber",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/2. 1D DP/04. House Robber.cpp",
        "hash": "2668d76f3d6bb4824558c7397d6bf8222f7bf16901a352d9d25c0819577a8cff"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "house-robber-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/14. Dynamic Programming/2. 1D DP/05. House Robber 2.cpp",
        "hash": "86777dacd987698299111beb288fb1375a2a8c27555ae4a4434b0281b3141c3a"
      },
      "python": {
        "id": "step_16_-_dynamic_programming_house-robber-2",
        "file": "Step 16 - Dynamic Programming/HOUSE-ROBBER-2.py",
        "hash": null,
        "title": "House Robber 2",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "matched"
    },
    {
      "key": "sieve-of-eratosthenes",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/3. Advanced Maths/03. Sieve of Eratosthenes.cpp",
        "hash": "2075f7db4866478c713f6f26cadf0f08453012145643dcb56df621134f244f95"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "all-divisors-of-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/3. Advanced Maths/02. All divisors of number.cpp",
        "hash": "83a3afb7cd7961e3422faac0be8715a1672b3f4849eb2f3009f45684985890ac"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "prime-factorization-using-sieve",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/3. Advanced Maths/04. Prime factorization using Sieve.cpp",
        "hash": "d698b6d804f5994f6ebf143ef1a90dd5045036bce73af96d498ec0d259cded32"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "fast-power",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/3. Advanced Maths/05. Fast Power.cpp",
        "hash": "cd5165308e0d0baae5ac593e7b72ee2a3813396863442212e6af030d0ca4b5c1"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "prime-factors-of-number",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/3. Advanced Maths/01. Prime factors of number.cpp",
        "hash": "ee38e99ece43bc3948e9de8fa3b1b9c760d4e13ed6403b85738adbbc4294e17f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "exceptionally-odd",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/2. Interview Problems/02. Exceptionally odd.cpp",
        "hash": "c6da1da042387f1ed20e639dc6605edcb6b7c61bc89f29b908a38898902e547d"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "minimum-bit-flips",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/2. Interview Problems/01. Minimum bit flips.cpp",
        "hash": "0985fcdd2371a7becc47f51da527eb4ae547143ba2d417a8215e43f9ef87bc9c"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "xor-of-numbers-from-l-to-r",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/2. Interview Problems/03. XOR of numbers from L to R.cpp",
        "hash": "c88ebbb88d9125668665ff829ca896aa56521062b2cbd650078289f9f71f46de"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "divide-two-numbers-using-bit-maipulation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/07.Divide two numbers using bit maipulation.cpp",
        "hash": "c0adbd5436b31f40451e2b5621c3e06577d5988ff5bd95598fab4d462fcbebdb"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-for-the-ith-bit",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/02.Check for the ith bit.cpp",
        "hash": "651ea0d870b4f0fd342ee9c7c70d575b5ed44d3c54a55dfde7badc3103279963"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "swap-two-numbers-without-temporary-variable",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/06.Swap two numbers without temporary variable.cpp",
        "hash": "4c263bdf543ac0616cd594bd07e5ec5114b2ead40103cc77a3859692250b922e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "set-the-righmost-unset-bit",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/05.Set the righmost unset bit.cpp",
        "hash": "9f036f6b86727639837a77c43fa1f1f0968f960b28170c8994eaed91fbae0d5f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bit-manipulation",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/01.Bit Manipulation.cpp",
        "hash": "c5e384e83d83949c6ae2d77d2173e052bae576df64b018a3cf6726896bc6608f"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "count-set-bit-from-numbers-1-to-n",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/08.Count set bit from numbers 1 to n.cpp",
        "hash": "64aea91c0c53e62202f277dbabbbeb828c2aa650d53cc0cb69804163b0099022"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-for-the-power-of-2",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/04.Check for the power of 2.cpp",
        "hash": "284a7d4168c46062308dc5c96477a2a04daeb2216922ba1e7ae48130c9a1f80e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "check-for-odd-even",
      "cpp": {
        "file": "Strivers-A2Z-DSA-Sheet/06.Bit Manipulation/1. Learn Bit Manipulation/03.Check for odd even.cpp",
        "hash": "e2392bf8fd09480f59104a8d04e86ceaa491ae936927ce39c0b548e640fd9e9e"
      },
      "python": null,
      "match_status": "unmatched"
    },
    {
      "key": "bfs-traversals",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_bfs-traversals",
        "file": "Step 13 + 14 - Trees + BST/BFS-TRAVERSALS.py",
        "hash": null,
        "title": "Bfs Traversals",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "serialise-deserialise",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_serialise-deserialise",
        "file": "Step 13 + 14 - Trees + BST/SERIALISE-DESERIALISE.py",
        "hash": null,
        "title": "Serialise Deserialise",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "convert-sorted-arr-to-bst",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_convert-sorted-arr-to-bst",
        "file": "Step 13 + 14 - Trees + BST/CONVERT-SORTED-ARR-TO-BST.py",
        "hash": null,
        "title": "Convert Sorted Arr To Bst",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subtree-of-another-tree",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_subtree-of-another-tree",
        "file": "Step 13 + 14 - Trees + BST/SUBTREE-OF-ANOTHER-TREE.py",
        "hash": null,
        "title": "Subtree Of Another Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-depth-of-binary-tree",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_max-depth-of-binary-tree",
        "file": "Step 13 + 14 - Trees + BST/MAX-DEPTH-OF-BINARY-TREE.py",
        "hash": null,
        "title": "Max Depth Of Binary Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-path-sum",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_max-path-sum",
        "file": "Step 13 + 14 - Trees + BST/MAX-PATH-SUM.py",
        "hash": null,
        "title": "Max Path Sum",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "binary-tree-right-side-view",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_binary-tree-right-side-view",
        "file": "Step 13 + 14 - Trees + BST/BINARY-TREE-RIGHT-SIDE-VIEW.py",
        "hash": null,
        "title": "Binary Tree Right Side View",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "construct-binary-tree-from-pre-in-traversal",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_construct-binary-tree-from-pre-in-traversal",
        "file": "Step 13 + 14 - Trees + BST/CONSTRUCT-BINARY-TREE-FROM-PRE-IN-TRAVERSAL.py",
        "hash": null,
        "title": "Construct Binary Tree From Pre In Traversal",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-good-nodes",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_count-good-nodes",
        "file": "Step 13 + 14 - Trees + BST/COUNT-GOOD-NODES.py",
        "hash": null,
        "title": "Count Good Nodes",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "dfs-traversals",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_dfs-traversals",
        "file": "Step 13 + 14 - Trees + BST/DFS-TRAVERSALS.py",
        "hash": null,
        "title": "Dfs Traversals",
        "difficulty": "Easy",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "invert-binary-tree",
      "cpp": null,
      "python": {
        "id": "step_13_+_14_-_trees_+_bst_invert-binary-tree",
        "file": "Step 13 + 14 - Trees + BST/INVERT-BINARY-TREE.py",
        "hash": null,
        "title": "Invert Binary Tree",
        "difficulty": "Medium",
        "category": "Step 13 + 14 - Trees + BST"
      },
      "patterns": [
        "BFS",
        "BST",
        "Binary Tree",
        "DFS",
        "Tree"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-stack",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_min-stack",
        "file": "Step 09 - Stacks Queues/MIN-STACK.py",
        "hash": null,
        "title": "Min Stack",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stack-using-two-queue",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_stack-using-two-queue",
        "file": "Step 09 - Stacks Queues/STACK-USING-TWO-QUEUE.py",
        "hash": null,
        "title": "Stack Using Two Queue",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "asteroid-collision",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_asteroid-collision",
        "file": "Step 09 - Stacks Queues/ASTEROID-COLLISION.py",
        "hash": null,
        "title": "Asteroid Collision",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sum-of-subarray-minimums",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_sum-of-subarray-minimums",
        "file": "Step 09 - Stacks Queues/SUM-OF-SUBARRAY-MINIMUMS.py",
        "hash": null,
        "title": "Sum Of Subarray Minimums",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "crawler-log-folder",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_crawler-log-folder",
        "file": "Step 09 - Stacks Queues/CRAWLER-LOG-FOLDER.py",
        "hash": null,
        "title": "Crawler Log Folder",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stack-using-one-queue",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_stack-using-one-queue",
        "file": "Step 09 - Stacks Queues/STACK-USING-ONE-QUEUE.py",
        "hash": null,
        "title": "Stack Using One Queue",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "queue-using-stack",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_queue-using-stack",
        "file": "Step 09 - Stacks Queues/QUEUE-USING-STACK.py",
        "hash": null,
        "title": "Queue Using Stack",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "next-smaller",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_next-smaller",
        "file": "Step 09 - Stacks Queues/NEXT-SMALLER.py",
        "hash": null,
        "title": "Next Smaller",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "valid-parantheses",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_valid-parantheses",
        "file": "Step 09 - Stacks Queues/VALID-PARANTHESES.py",
        "hash": null,
        "title": "Valid Parantheses",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "maximal-rectangle",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_maximal-rectangle",
        "file": "Step 09 - Stacks Queues/MAXIMAL-RECTANGLE.py",
        "hash": null,
        "title": "Maximal Rectangle",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stock-span",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_stock-span",
        "file": "Step 09 - Stacks Queues/STOCK-SPAN.py",
        "hash": null,
        "title": "Stock Span",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-k-digits",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_remove-k-digits",
        "file": "Step 09 - Stacks Queues/REMOVE-K-DIGITS.py",
        "hash": null,
        "title": "Remove K Digits",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "number-of-nges-to-the-right",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_number-of-nges-to-the-right",
        "file": "Step 09 - Stacks Queues/NUMBER-OF-NGES-TO-THE-RIGHT.py",
        "hash": null,
        "title": "Number Of Nges To The Right",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stack-using-linkedlist",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_stack-using-linkedlist",
        "file": "Step 09 - Stacks Queues/STACK-USING-LINKEDLIST.py",
        "hash": null,
        "title": "Stack Using Linkedlist",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sliding-window-max",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_sliding-window-max",
        "file": "Step 09 - Stacks Queues/SLIDING-WINDOW-MAX.py",
        "hash": null,
        "title": "Sliding Window Max",
        "difficulty": "Medium",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sum-of-subarray-ranges",
      "cpp": null,
      "python": {
        "id": "step_09_-_stacks_queues_sum-of-subarray-ranges",
        "file": "Step 09 - Stacks Queues/SUM-OF-SUBARRAY-RANGES.py",
        "hash": null,
        "title": "Sum Of Subarray Ranges",
        "difficulty": "Easy",
        "category": "Step 09 - Stacks Queues"
      },
      "patterns": [
        "Monotonic Stack",
        "Queue",
        "Stack"
      ],
      "match_status": "python_only"
    },
    {
      "key": "prefix-infix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_prefix-infix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/PREFIX-INFIX.py",
        "hash": null,
        "title": "Prefix Infix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "prefix-postfix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_prefix-postfix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/PREFIX-POSTFIX.py",
        "hash": null,
        "title": "Prefix Postfix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "postfix-prefix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_postfix-prefix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/POSTFIX-PREFIX.py",
        "hash": null,
        "title": "Postfix Prefix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "infix-prefix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_infix-prefix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/INFIX-PREFIX.py",
        "hash": null,
        "title": "Infix Prefix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "infix-postfix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_infix-postfix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/INFIX-POSTFIX.py",
        "hash": null,
        "title": "Infix Postfix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "postfix-infix",
      "cpp": null,
      "python": {
        "id": "infix-prefix-postfix_postfix-infix",
        "file": "Step 09 - Stacks Queues/INFIX-PREFIX-POSTFIX/POSTFIX-INFIX.py",
        "hash": null,
        "title": "Postfix Infix",
        "difficulty": "Easy",
        "category": "INFIX-PREFIX-POSTFIX"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "cheapest-flight-k-stops",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_cheapest-flight-k-stops",
        "file": "Step 15 - Graphs/CHEAPEST-FLIGHT-K-STOPS.py",
        "hash": null,
        "title": "Cheapest Flight K Stops",
        "difficulty": "Medium",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "enclaves",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_enclaves",
        "file": "Step 15 - Graphs/ENCLAVES.py",
        "hash": null,
        "title": "Enclaves",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "make-a-large-island",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_make-a-large-island",
        "file": "Step 15 - Graphs/MAKE-A-LARGE-ISLAND.py",
        "hash": null,
        "title": "Make A Large Island",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "minimum-effort-path",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_minimum-effort-path",
        "file": "Step 15 - Graphs/MINIMUM-EFFORT-PATH.py",
        "hash": null,
        "title": "Minimum Effort Path",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "most-stones-removed-within-same-row",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_most-stones-removed-within-same-row",
        "file": "Step 15 - Graphs/MOST-STONES-REMOVED-WITHIN-SAME-ROW.py",
        "hash": null,
        "title": "Most Stones Removed Within Same Row",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "aliens-dictionary",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_aliens-dictionary",
        "file": "Step 15 - Graphs/ALIENS-DICTIONARY.py",
        "hash": null,
        "title": "Aliens Dictionary",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "eventual-safe-states",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_eventual-safe-states",
        "file": "Step 15 - Graphs/EVENTUAL-SAFE-STATES.py",
        "hash": null,
        "title": "Eventual Safe States",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "num-ways-to-arrive-at-destination",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_num-ways-to-arrive-at-destination",
        "file": "Step 15 - Graphs/NUM-WAYS-TO-ARRIVE-AT-DESTINATION.py",
        "hash": null,
        "title": "Num Ways To Arrive At Destination",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "number-provinces",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_number-provinces",
        "file": "Step 15 - Graphs/NUMBER-PROVINCES.py",
        "hash": null,
        "title": "Number Provinces",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "mst-kruskal-algo",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_mst-kruskal-algo",
        "file": "Step 15 - Graphs/MST-KRUSKAL-ALGO.py",
        "hash": null,
        "title": "Mst Kruskal Algo",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "djikstra-algorithm",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_djikstra-algorithm",
        "file": "Step 15 - Graphs/DJIKSTRA-ALGORITHM.py",
        "hash": null,
        "title": "Djikstra Algorithm",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "mst-prims-algorithm",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_mst-prims-algorithm",
        "file": "Step 15 - Graphs/MST-PRIMS-ALGORITHM.py",
        "hash": null,
        "title": "Mst Prims Algorithm",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "undirected-graph-cycle-dfs",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_undirected-graph-cycle-dfs",
        "file": "Step 15 - Graphs/UNDIRECTED-GRAPH-CYCLE-DFS.py",
        "hash": null,
        "title": "Undirected Graph Cycle Dfs",
        "difficulty": "Hard",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "disjoint-set-implementation",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_disjoint-set-implementation",
        "file": "Step 15 - Graphs/DISJOINT-SET-IMPLEMENTATION.py",
        "hash": null,
        "title": "Disjoint Set Implementation",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "smallest-distance-threshold",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_smallest-distance-threshold",
        "file": "Step 15 - Graphs/SMALLEST-DISTANCE-THRESHOLD.py",
        "hash": null,
        "title": "Smallest Distance Threshold",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "directed-graph-cycle-dfs",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_directed-graph-cycle-dfs",
        "file": "Step 15 - Graphs/DIRECTED-GRAPH-CYCLE-DFS.py",
        "hash": null,
        "title": "Directed Graph Cycle Dfs",
        "difficulty": "Hard",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-multiplications-to-reach-end",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_min-multiplications-to-reach-end",
        "file": "Step 15 - Graphs/MIN-MULTIPLICATIONS-TO-REACH-END.py",
        "hash": null,
        "title": "Min Multiplications To Reach End",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "floyd-warshall",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_floyd-warshall",
        "file": "Step 15 - Graphs/FLOYD-WARSHALL.py",
        "hash": null,
        "title": "Floyd Warshall",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "binary-maze-shortest-path",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_binary-maze-shortest-path",
        "file": "Step 15 - Graphs/BINARY-MAZE-SHORTEST-PATH.py",
        "hash": null,
        "title": "Binary Maze Shortest Path",
        "difficulty": "Medium",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "topological-sort-dfs",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_topological-sort-dfs",
        "file": "Step 15 - Graphs/TOPOLOGICAL-SORT-DFS.py",
        "hash": null,
        "title": "Topological Sort Dfs",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "word-ladder-2",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_word-ladder-2",
        "file": "Step 15 - Graphs/WORD-LADDER-2.py",
        "hash": null,
        "title": "Word Ladder 2",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "shortest-path-ug",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_shortest-path-ug",
        "file": "Step 15 - Graphs/SHORTEST-PATH-UG.py",
        "hash": null,
        "title": "Shortest Path Ug",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "word-ladder-1",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_word-ladder-1",
        "file": "Step 15 - Graphs/WORD-LADDER-1.py",
        "hash": null,
        "title": "Word Ladder 1",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "topological-sort-bfs-kahns-algo",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_topological-sort-bfs-kahns-algo",
        "file": "Step 15 - Graphs/TOPOLOGICAL-SORT-BFS-KAHNS-ALGO.py",
        "hash": null,
        "title": "Topological Sort Bfs Kahns Algo",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "operations-to-make-network-connected",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_operations-to-make-network-connected",
        "file": "Step 15 - Graphs/OPERATIONS-TO-MAKE-NETWORK-CONNECTED.py",
        "hash": null,
        "title": "Operations To Make Network Connected",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "bellman-ford",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_bellman-ford",
        "file": "Step 15 - Graphs/BELLMAN-FORD.py",
        "hash": null,
        "title": "Bellman Ford",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "undirected-graph-cycle-bfs",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_undirected-graph-cycle-bfs",
        "file": "Step 15 - Graphs/UNDIRECTED-GRAPH-CYCLE-BFS.py",
        "hash": null,
        "title": "Undirected Graph Cycle Bfs",
        "difficulty": "Hard",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "directed-graph-cycle-bfs",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_directed-graph-cycle-bfs",
        "file": "Step 15 - Graphs/DIRECTED-GRAPH-CYCLE-BFS.py",
        "hash": null,
        "title": "Directed Graph Cycle Bfs",
        "difficulty": "Hard",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "course-schedule-2",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_course-schedule-2",
        "file": "Step 15 - Graphs/COURSE-SCHEDULE-2.py",
        "hash": null,
        "title": "Course Schedule 2",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "network-delay",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_network-delay",
        "file": "Step 15 - Graphs/NETWORK-DELAY.py",
        "hash": null,
        "title": "Network Delay",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "course-schedule-1",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_course-schedule-1",
        "file": "Step 15 - Graphs/COURSE-SCHEDULE-1.py",
        "hash": null,
        "title": "Course Schedule 1",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "flood-fill",
      "cpp": null,
      "python": {
        "id": "step_15_-_graphs_flood-fill",
        "file": "Step 15 - Graphs/FLOOD-FILL.py",
        "hash": null,
        "title": "Flood Fill",
        "difficulty": "Easy",
        "category": "Step 15 - Graphs"
      },
      "patterns": [
        "BFS",
        "DFS",
        "Graph",
        "Union Find"
      ],
      "match_status": "python_only"
    },
    {
      "key": "bubble-sort",
      "cpp": null,
      "python": {
        "id": "step_02_-_sorting_techniques_bubble-sort",
        "file": "Step 02 - Sorting Techniques/BUBBLE-SORT.py",
        "hash": null,
        "title": "Bubble Sort",
        "difficulty": "Easy",
        "category": "Step 02 - Sorting Techniques"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-sort",
      "cpp": null,
      "python": {
        "id": "step_02_-_sorting_techniques_merge-sort",
        "file": "Step 02 - Sorting Techniques/MERGE-SORT.py",
        "hash": null,
        "title": "Merge Sort",
        "difficulty": "Easy",
        "category": "Step 02 - Sorting Techniques"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "selection-sort",
      "cpp": null,
      "python": {
        "id": "step_02_-_sorting_techniques_selection-sort",
        "file": "Step 02 - Sorting Techniques/SELECTION-SORT.py",
        "hash": null,
        "title": "Selection Sort",
        "difficulty": "Easy",
        "category": "Step 02 - Sorting Techniques"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "quick-sort",
      "cpp": null,
      "python": {
        "id": "step_02_-_sorting_techniques_quick-sort",
        "file": "Step 02 - Sorting Techniques/QUICK-SORT.py",
        "hash": null,
        "title": "Quick Sort",
        "difficulty": "Easy",
        "category": "Step 02 - Sorting Techniques"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "insertion-sort",
      "cpp": null,
      "python": {
        "id": "step_02_-_sorting_techniques_insertion-sort",
        "file": "Step 02 - Sorting Techniques/INSERTION-SORT.py",
        "hash": null,
        "title": "Insertion Sort",
        "difficulty": "Easy",
        "category": "Step 02 - Sorting Techniques"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-05-partn-with-given-diff",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-05-partn-with-given-diff",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-05-PARTN-WITH-GIVEN-DIFF.py",
        "hash": null,
        "title": "Subseq 05 Partn With Given Diff",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-03-partition-arr-to-min-sum-diff",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-03-partition-arr-to-min-sum-diff",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-03-PARTITION-ARR-TO-MIN-SUM-DIFF.py",
        "hash": null,
        "title": "Subseq 03 Partition Arr To Min Sum Diff",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "minimal-cost",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_minimal-cost",
        "file": "Step 16 - Dynamic Programming/MINIMAL-COST.py",
        "hash": null,
        "title": "Minimal Cost",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "choco-pickup",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_choco-pickup",
        "file": "Step 16 - Dynamic Programming/CHOCO-PICKUP.py",
        "hash": null,
        "title": "Choco Pickup",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-6",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-6",
        "file": "Step 16 - Dynamic Programming/STOCKS-6.py",
        "hash": null,
        "title": "Stocks 6",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "shortest-common-superseq",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_shortest-common-superseq",
        "file": "Step 16 - Dynamic Programming/SHORTEST-COMMON-SUPERSEQ.py",
        "hash": null,
        "title": "Shortest Common Superseq",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-09-knapsack",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-09-knapsack",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-09-KNAPSACK.py",
        "hash": null,
        "title": "Subseq 09 Knapsack",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-4",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-4",
        "file": "Step 16 - Dynamic Programming/STOCKS-4.py",
        "hash": null,
        "title": "Stocks 4",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-5",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-5",
        "file": "Step 16 - Dynamic Programming/STOCKS-5.py",
        "hash": null,
        "title": "Stocks 5",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-2",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-2",
        "file": "Step 16 - Dynamic Programming/STOCKS-2.py",
        "hash": null,
        "title": "Stocks 2",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-08-coin-change2",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-08-coin-change2",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-08-COIN-CHANGE2.py",
        "hash": null,
        "title": "Subseq 08 Coin Change2",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-04-count-subset-eq-to-given-sum",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-04-count-subset-eq-to-given-sum",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-04-COUNT-SUBSET-EQ-TO-GIVEN-SUM.py",
        "hash": null,
        "title": "Subseq 04 Count Subset Eq To Given Sum",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-07-target-sum",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-07-target-sum",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-07-TARGET-SUM.py",
        "hash": null,
        "title": "Subseq 07 Target Sum",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-palindromic-subseq",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_longest-palindromic-subseq",
        "file": "Step 16 - Dynamic Programming/LONGEST-PALINDROMIC-SUBSEQ.py",
        "hash": null,
        "title": "Longest Palindromic Subseq",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-06-coin-change",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-06-coin-change",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-06-COIN-CHANGE.py",
        "hash": null,
        "title": "Subseq 06 Coin Change",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-01-subset-sum-problem",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-01-subset-sum-problem",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-01-SUBSET-SUM-PROBLEM.py",
        "hash": null,
        "title": "Subseq 01 Subset Sum Problem",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-02-print-lis",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-02-print-lis",
        "file": "Step 16 - Dynamic Programming/LIS-02-PRINT-LIS.py",
        "hash": null,
        "title": "Lis 02 Print Lis",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "mcm-01-mcm",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_mcm-01-mcm",
        "file": "Step 16 - Dynamic Programming/MCM-01-MCM.py",
        "hash": null,
        "title": "Mcm 01 Mcm",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-10-rod-cutting",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-10-rod-cutting",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-10-ROD-CUTTING.py",
        "hash": null,
        "title": "Subseq 10 Rod Cutting",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "delete-operationg-make-string-same",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_delete-operationg-make-string-same",
        "file": "Step 16 - Dynamic Programming/DELETE-OPERATIONG-MAKE-STRING-SAME.py",
        "hash": null,
        "title": "Delete Operationg Make String Same",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-common-subseq",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_longest-common-subseq",
        "file": "Step 16 - Dynamic Programming/LONGEST-COMMON-SUBSEQ.py",
        "hash": null,
        "title": "Longest Common Subseq",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-04-number-lis",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-04-number-lis",
        "file": "Step 16 - Dynamic Programming/LIS-04-NUMBER-LIS.py",
        "hash": null,
        "title": "Lis 04 Number Lis",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "distinct-subseq",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_distinct-subseq",
        "file": "Step 16 - Dynamic Programming/DISTINCT-SUBSEQ.py",
        "hash": null,
        "title": "Distinct Subseq",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "burst-balloon-02",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_burst-balloon-02",
        "file": "Step 16 - Dynamic Programming/BURST-BALLOON-02.py",
        "hash": null,
        "title": "Burst Balloon 02",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subseq-02-partition-equal-subset-sum",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_subseq-02-partition-equal-subset-sum",
        "file": "Step 16 - Dynamic Programming/SUBSEQ-02-PARTITION-EQUAL-SUBSET-SUM.py",
        "hash": null,
        "title": "Subseq 02 Partition Equal Subset Sum",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-path-sum-triangle",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_min-path-sum-triangle",
        "file": "Step 16 - Dynamic Programming/MIN-PATH-SUM-TRIANGLE.py",
        "hash": null,
        "title": "Min Path Sum Triangle",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-03-largest-div-subset",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-03-largest-div-subset",
        "file": "Step 16 - Dynamic Programming/LIS-03-LARGEST-DIV-SUBSET.py",
        "hash": null,
        "title": "Lis 03 Largest Div Subset",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-insertions-to-make-string-palindrome",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_min-insertions-to-make-string-palindrome",
        "file": "Step 16 - Dynamic Programming/MIN-INSERTIONS-TO-MAKE-STRING-PALINDROME.py",
        "hash": null,
        "title": "Min Insertions To Make String Palindrome",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "mcm-02-min-cost-to-cut-stick",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_mcm-02-min-cost-to-cut-stick",
        "file": "Step 16 - Dynamic Programming/MCM-02-MIN-COST-TO-CUT-STICK.py",
        "hash": null,
        "title": "Mcm 02 Min Cost To Cut Stick",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-1",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-1",
        "file": "Step 16 - Dynamic Programming/STOCKS-1.py",
        "hash": null,
        "title": "Stocks 1",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-falling-path-sum",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_min-falling-path-sum",
        "file": "Step 16 - Dynamic Programming/MIN-FALLING-PATH-SUM.py",
        "hash": null,
        "title": "Min Falling Path Sum",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "dp-square-count-submatrics",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_dp-square-count-submatrics",
        "file": "Step 16 - Dynamic Programming/DP-SQUARE-COUNT-SUBMATRICS.py",
        "hash": null,
        "title": "Dp Square Count Submatrics",
        "difficulty": "Hard",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "edit-distance",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_edit-distance",
        "file": "Step 16 - Dynamic Programming/EDIT-DISTANCE.py",
        "hash": null,
        "title": "Edit Distance",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-05-bitonic",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-05-bitonic",
        "file": "Step 16 - Dynamic Programming/LIS-05-BITONIC.py",
        "hash": null,
        "title": "Lis 05 Bitonic",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "stocks-3",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_stocks-3",
        "file": "Step 16 - Dynamic Programming/STOCKS-3.py",
        "hash": null,
        "title": "Stocks 3",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "print-longest-common-subseq",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_print-longest-common-subseq",
        "file": "Step 16 - Dynamic Programming/PRINT-LONGEST-COMMON-SUBSEQ.py",
        "hash": null,
        "title": "Print Longest Common Subseq",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-06-longest-string-chain",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-06-longest-string-chain",
        "file": "Step 16 - Dynamic Programming/LIS-06-LONGEST-STRING-CHAIN.py",
        "hash": null,
        "title": "Lis 06 Longest String Chain",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "0-1-knapsack",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_0-1-knapsack",
        "file": "Step 16 - Dynamic Programming/0-1-KNAPSACK.py",
        "hash": null,
        "title": "0 1 Knapsack",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lis-01-implement",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_lis-01-implement",
        "file": "Step 16 - Dynamic Programming/LIS-01-IMPLEMENT.py",
        "hash": null,
        "title": "Lis 01 Implement",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "ninjas-training",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_ninjas-training",
        "file": "Step 16 - Dynamic Programming/NINJAS-TRAINING.py",
        "hash": null,
        "title": "Ninjas Training",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "unique-paths-1",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_unique-paths-1",
        "file": "Step 16 - Dynamic Programming/UNIQUE-PATHS-1.py",
        "hash": null,
        "title": "Unique Paths 1",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "house-robber-1",
      "cpp": null,
      "python": {
        "id": "step_16_-_dynamic_programming_house-robber-1",
        "file": "Step 16 - Dynamic Programming/HOUSE-ROBBER-1.py",
        "hash": null,
        "title": "House Robber 1",
        "difficulty": "Easy",
        "category": "Step 16 - Dynamic Programming"
      },
      "patterns": [
        "Dynamic Programming",
        "Optimization"
      ],
      "match_status": "python_only"
    },
    {
      "key": "intersection-of-ll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_intersection-of-ll",
        "file": "Step 06 - Linked List/INTERSECTION-OF-LL.py",
        "hash": null,
        "title": "Intersection Of Ll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "length-of-cycle",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_length-of-cycle",
        "file": "Step 06 - Linked List/LENGTH-OF-CYCLE.py",
        "hash": null,
        "title": "Length Of Cycle",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "flatten-dll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_flatten-dll",
        "file": "Step 06 - Linked List/FLATTEN-DLL.py",
        "hash": null,
        "title": "Flatten Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "split-linked-list-in-parts",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_split-linked-list-in-parts",
        "file": "Step 06 - Linked List/SPLIT-LINKED-LIST-IN-PARTS.py",
        "hash": null,
        "title": "Split Linked List In Parts",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "pairs-in-dll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_pairs-in-dll",
        "file": "Step 06 - Linked List/PAIRS-IN-DLL.py",
        "hash": null,
        "title": "Pairs In Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "palindrome",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_palindrome",
        "file": "Step 06 - Linked List/PALINDROME.py",
        "hash": null,
        "title": "Palindrome",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rotate-list",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_rotate-list",
        "file": "Step 06 - Linked List/ROTATE-LIST.py",
        "hash": null,
        "title": "Rotate List",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-duplicates-dll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_remove-duplicates-dll",
        "file": "Step 06 - Linked List/REMOVE-DUPLICATES-DLL.py",
        "hash": null,
        "title": "Remove Duplicates Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sort-list",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_sort-list",
        "file": "Step 06 - Linked List/SORT-LIST.py",
        "hash": null,
        "title": "Sort List",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-nth-node",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_remove-nth-node",
        "file": "Step 06 - Linked List/REMOVE-NTH-NODE.py",
        "hash": null,
        "title": "Remove Nth Node",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "detect-cycle",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_detect-cycle",
        "file": "Step 06 - Linked List/DETECT-CYCLE.py",
        "hash": null,
        "title": "Detect Cycle",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "odd-even-grouping",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_odd-even-grouping",
        "file": "Step 06 - Linked List/ODD-EVEN-GROUPING.py",
        "hash": null,
        "title": "Odd Even Grouping",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "detect-cycle-ii",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_detect-cycle-ii",
        "file": "Step 06 - Linked List/DETECT-CYCLE-II.py",
        "hash": null,
        "title": "Detect Cycle Ii",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "insert-node-dll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_insert-node-dll",
        "file": "Step 06 - Linked List/INSERT-NODE-DLL.py",
        "hash": null,
        "title": "Insert Node Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "insert-gcd-in-linked-list",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_insert-gcd-in-linked-list",
        "file": "Step 06 - Linked List/INSERT-GCD-IN-LINKED-LIST.py",
        "hash": null,
        "title": "Insert Gcd In Linked List",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-nodes-dll",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_remove-nodes-dll",
        "file": "Step 06 - Linked List/REMOVE-NODES-DLL.py",
        "hash": null,
        "title": "Remove Nodes Dll",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "add-two-numbers",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_add-two-numbers",
        "file": "Step 06 - Linked List/ADD-TWO-NUMBERS.py",
        "hash": null,
        "title": "Add Two Numbers",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "tortoise-hair-method",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_tortoise-hair-method",
        "file": "Step 06 - Linked List/TORTOISE-HAIR-METHOD.py",
        "hash": null,
        "title": "Tortoise Hair Method",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "clone-list",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_clone-list",
        "file": "Step 06 - Linked List/CLONE-LIST.py",
        "hash": null,
        "title": "Clone List",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sort-0s-1s-2s",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_sort-0s-1s-2s",
        "file": "Step 06 - Linked List/SORT-0S-1S-2S.py",
        "hash": null,
        "title": "Sort 0S 1S 2S",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "reverse-nodes-in-group-of-k",
      "cpp": null,
      "python": {
        "id": "step_06_-_linked_list_reverse-nodes-in-group-of-k",
        "file": "Step 06 - Linked List/REVERSE-NODES-IN-GROUP-OF-K.py",
        "hash": null,
        "title": "Reverse Nodes In Group Of K",
        "difficulty": "Easy",
        "category": "Step 06 - Linked List"
      },
      "patterns": [
        "Linked List",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lfu-cache",
      "cpp": null,
      "python": {
        "id": "design_based_lfu-cache",
        "file": "Step 06 - Linked List/DESIGN BASED/LFU-CACHE.py",
        "hash": null,
        "title": "Lfu Cache",
        "difficulty": "Easy",
        "category": "DESIGN BASED"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "painters-partition",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_painters-partition",
        "file": "Step 04 - Binary Search/PAINTERS-PARTITION.py",
        "hash": null,
        "title": "Painters Partition",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "2d-matrix-binary-search",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_2d-matrix-binary-search",
        "file": "Step 04 - Binary Search/2D-MATRIX-BINARY-SEARCH.py",
        "hash": null,
        "title": "2D Matrix Binary Search",
        "difficulty": "Medium",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "2d-matrix-bs-hard",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_2d-matrix-bs-hard",
        "file": "Step 04 - Binary Search/2D-MATRIX-BS-HARD.py",
        "hash": null,
        "title": "2D Matrix Bs Hard",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "first-last-index",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_first-last-index",
        "file": "Step 04 - Binary Search/FIRST-LAST-INDEX.py",
        "hash": null,
        "title": "First Last Index",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-in-rotated-array",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_min-in-rotated-array",
        "file": "Step 04 - Binary Search/MIN-IN-ROTATED-ARRAY.py",
        "hash": null,
        "title": "Min In Rotated Array",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "ship-packages",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_ship-packages",
        "file": "Step 04 - Binary Search/SHIP-PACKAGES.py",
        "hash": null,
        "title": "Ship Packages",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "split-largest",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_split-largest",
        "file": "Step 04 - Binary Search/SPLIT-LARGEST.py",
        "hash": null,
        "title": "Split Largest",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "nth-root",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_nth-root",
        "file": "Step 04 - Binary Search/NTH-ROOT.py",
        "hash": null,
        "title": "Nth Root",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "aggressive-cows",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_aggressive-cows",
        "file": "Step 04 - Binary Search/AGGRESSIVE-COWS.py",
        "hash": null,
        "title": "Aggressive Cows",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-1s-row",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_max-1s-row",
        "file": "Step 04 - Binary Search/MAX-1S-ROW.py",
        "hash": null,
        "title": "Max 1S Row",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sqrt",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_sqrt",
        "file": "Step 04 - Binary Search/SQRT.py",
        "hash": null,
        "title": "Sqrt",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "kth-missing-pos",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_kth-missing-pos",
        "file": "Step 04 - Binary Search/KTH-MISSING-POS.py",
        "hash": null,
        "title": "Kth Missing Pos",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "median-of-two-sorted-arr",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_median-of-two-sorted-arr",
        "file": "Step 04 - Binary Search/MEDIAN-OF-TWO-SORTED-ARR.py",
        "hash": null,
        "title": "Median Of Two Sorted Arr",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "search-rot-sorted-1",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_search-rot-sorted-1",
        "file": "Step 04 - Binary Search/SEARCH-ROT-SORTED-1.py",
        "hash": null,
        "title": "Search Rot Sorted 1",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "gas-stations",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_gas-stations",
        "file": "Step 04 - Binary Search/GAS-STATIONS.py",
        "hash": null,
        "title": "Gas Stations",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "koko-eating-bananas",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_koko-eating-bananas",
        "file": "Step 04 - Binary Search/KOKO-EATING-BANANAS.py",
        "hash": null,
        "title": "Koko Eating Bananas",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rotation",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_rotation",
        "file": "Step 04 - Binary Search/ROTATION.py",
        "hash": null,
        "title": "Rotation",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "book-allocation-problem",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_book-allocation-problem",
        "file": "Step 04 - Binary Search/BOOK-ALLOCATION-PROBLEM.py",
        "hash": null,
        "title": "Book Allocation Problem",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "ceil-floor",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_ceil-floor",
        "file": "Step 04 - Binary Search/CEIL-FLOOR.py",
        "hash": null,
        "title": "Ceil Floor",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "peak-element",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_peak-element",
        "file": "Step 04 - Binary Search/PEAK-ELEMENT.py",
        "hash": null,
        "title": "Peak Element",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "peak-element-02",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_peak-element-02",
        "file": "Step 04 - Binary Search/PEAK-ELEMENT-02.py",
        "hash": null,
        "title": "Peak Element 02",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "single-element",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_single-element",
        "file": "Step 04 - Binary Search/SINGLE-ELEMENT.py",
        "hash": null,
        "title": "Single Element",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "smallest-divisor",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_smallest-divisor",
        "file": "Step 04 - Binary Search/SMALLEST-DIVISOR.py",
        "hash": null,
        "title": "Smallest Divisor",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-days-m-bouqets",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_min-days-m-bouqets",
        "file": "Step 04 - Binary Search/MIN-DAYS-M-BOUQETS.py",
        "hash": null,
        "title": "Min Days M Bouqets",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "median-in-matrix",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_median-in-matrix",
        "file": "Step 04 - Binary Search/MEDIAN-IN-MATRIX.py",
        "hash": null,
        "title": "Median In Matrix",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "search-rot-sorted-2",
      "cpp": null,
      "python": {
        "id": "step_04_-_binary_search_search-rot-sorted-2",
        "file": "Step 04 - Binary Search/SEARCH-ROT-SORTED-2.py",
        "hash": null,
        "title": "Search Rot Sorted 2",
        "difficulty": "Easy",
        "category": "Step 04 - Binary Search"
      },
      "patterns": [
        "Binary Search",
        "Search"
      ],
      "match_status": "python_only"
    },
    {
      "key": "word-search-2",
      "cpp": null,
      "python": {
        "id": "step_17_-_tries_word-search-2",
        "file": "Step 17 - Tries/WORD-SEARCH-2.py",
        "hash": null,
        "title": "Word Search 2",
        "difficulty": "Easy",
        "category": "Step 17 - Tries"
      },
      "patterns": [
        "String",
        "Trie"
      ],
      "match_status": "python_only"
    },
    {
      "key": "dp-on-tries-min-valid-substring",
      "cpp": null,
      "python": {
        "id": "step_17_-_tries_dp-on-tries-min-valid-substring",
        "file": "Step 17 - Tries/DP-ON-TRIES-MIN-VALID-SUBSTRING.py",
        "hash": null,
        "title": "Dp On Tries Min Valid Substring",
        "difficulty": "Hard",
        "category": "Step 17 - Tries"
      },
      "patterns": [
        "String",
        "Trie"
      ],
      "match_status": "python_only"
    },
    {
      "key": "implement-trie",
      "cpp": null,
      "python": {
        "id": "step_17_-_tries_implement-trie",
        "file": "Step 17 - Tries/IMPLEMENT-TRIE.py",
        "hash": null,
        "title": "Implement Trie",
        "difficulty": "Easy",
        "category": "Step 17 - Tries"
      },
      "patterns": [
        "String",
        "Trie"
      ],
      "match_status": "python_only"
    },
    {
      "key": "design-add-search-data-structure",
      "cpp": null,
      "python": {
        "id": "step_17_-_tries_design-add-search-data-structure",
        "file": "Step 17 - Tries/DESIGN-ADD-SEARCH-DATA-STRUCTURE.py",
        "hash": null,
        "title": "Design Add Search Data Structure",
        "difficulty": "Easy",
        "category": "Step 17 - Tries"
      },
      "patterns": [
        "String",
        "Trie"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rabin-karp-repeated-string-match",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_rabin-karp-repeated-string-match",
        "file": "Step 05 + 18 - Strings/RABIN-KARP-REPEATED-STRING-MATCH.py",
        "hash": null,
        "title": "Rabin Karp Repeated String Match",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sort-chars-by-freq",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_sort-chars-by-freq",
        "file": "Step 05 + 18 - Strings/SORT-CHARS-BY-FREQ.py",
        "hash": null,
        "title": "Sort Chars By Freq",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "roman-to-int",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_roman-to-int",
        "file": "Step 05 + 18 - Strings/ROMAN-TO-INT.py",
        "hash": null,
        "title": "Roman To Int",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "find-index-of-first-occurence",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_find-index-of-first-occurence",
        "file": "Step 05 + 18 - Strings/FIND-INDEX-OF-FIRST-OCCURENCE.py",
        "hash": null,
        "title": "Find Index Of First Occurence",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-palindromic-subseq",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_count-palindromic-subseq",
        "file": "Step 05 + 18 - Strings/COUNT-PALINDROMIC-SUBSEQ.py",
        "hash": null,
        "title": "Count Palindromic Subseq",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "valid-anagrams",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_valid-anagrams",
        "file": "Step 05 + 18 - Strings/VALID-ANAGRAMS.py",
        "hash": null,
        "title": "Valid Anagrams",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "check-rotation",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_check-rotation",
        "file": "Step 05 + 18 - Strings/CHECK-ROTATION.py",
        "hash": null,
        "title": "Check Rotation",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-palindromic-substr",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_longest-palindromic-substr",
        "file": "Step 05 + 18 - Strings/LONGEST-PALINDROMIC-SUBSTR.py",
        "hash": null,
        "title": "Longest Palindromic Substr",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-outer-paranth",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_remove-outer-paranth",
        "file": "Step 05 + 18 - Strings/REMOVE-OUTER-PARANTH.py",
        "hash": null,
        "title": "Remove Outer Paranth",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "kmp-pattern-matching",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_kmp-pattern-matching",
        "file": "Step 05 + 18 - Strings/KMP-PATTERN-MATCHING.py",
        "hash": null,
        "title": "Kmp Pattern Matching",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-score-from-removing-substr",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_max-score-from-removing-substr",
        "file": "Step 05 + 18 - Strings/MAX-SCORE-FROM-REMOVING-SUBSTR.py",
        "hash": null,
        "title": "Max Score From Removing Substr",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sum-of-beauty-of-all-substr",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_sum-of-beauty-of-all-substr",
        "file": "Step 05 + 18 - Strings/SUM-OF-BEAUTY-OF-ALL-SUBSTR.py",
        "hash": null,
        "title": "Sum Of Beauty Of All Substr",
        "difficulty": "Hard",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "largest-odd-num-in-string",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_largest-odd-num-in-string",
        "file": "Step 05 + 18 - Strings/LARGEST-ODD-NUM-IN-STRING.py",
        "hash": null,
        "title": "Largest Odd Num In String",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-add-to-make-parantheses",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_min-add-to-make-parantheses",
        "file": "Step 05 + 18 - Strings/MIN-ADD-TO-MAKE-PARANTHESES.py",
        "hash": null,
        "title": "Min Add To Make Parantheses",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rev-words",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_rev-words",
        "file": "Step 05 + 18 - Strings/REV-WORDS.py",
        "hash": null,
        "title": "Rev Words",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-say",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_count-say",
        "file": "Step 05 + 18 - Strings/COUNT-SAY.py",
        "hash": null,
        "title": "Count Say",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-substrs",
      "cpp": null,
      "python": {
        "id": "step_05_+_18_-_strings_count-substrs",
        "file": "Step 05 + 18 - Strings/COUNT-SUBSTRS.py",
        "hash": null,
        "title": "Count Substrs",
        "difficulty": "Easy",
        "category": "Step 05 + 18 - Strings"
      },
      "patterns": [
        "Sliding Window",
        "String",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rat-in-a-maze",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_rat-in-a-maze",
        "file": "Step 07 - Recursion/RAT-IN-A-MAZE.py",
        "hash": null,
        "title": "Rat In A Maze",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subsets",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_subsets",
        "file": "Step 07 - Recursion/SUBSETS.py",
        "hash": null,
        "title": "Subsets",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "generate-all-bin-strings",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_generate-all-bin-strings",
        "file": "Step 07 - Recursion/GENERATE-ALL-BIN-STRINGS.py",
        "hash": null,
        "title": "Generate All Bin Strings",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "better-string",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_better-string",
        "file": "Step 07 - Recursion/BETTER-STRING.py",
        "hash": null,
        "title": "Better String",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "n-queen",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_n-queen",
        "file": "Step 07 - Recursion/N-QUEEN.py",
        "hash": null,
        "title": "N Queen",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subset-sum-1",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_subset-sum-1",
        "file": "Step 07 - Recursion/SUBSET-SUM-1.py",
        "hash": null,
        "title": "Subset Sum 1",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subset-sum-2",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_subset-sum-2",
        "file": "Step 07 - Recursion/SUBSET-SUM-2.py",
        "hash": null,
        "title": "Subset Sum 2",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "reverse-stack",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_reverse-stack",
        "file": "Step 07 - Recursion/REVERSE-STACK.py",
        "hash": null,
        "title": "Reverse Stack",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "word-search",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_word-search",
        "file": "Step 07 - Recursion/WORD-SEARCH.py",
        "hash": null,
        "title": "Word Search",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "phone-number",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_phone-number",
        "file": "Step 07 - Recursion/PHONE-NUMBER.py",
        "hash": null,
        "title": "Phone Number",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "palindrome-partitioning",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_palindrome-partitioning",
        "file": "Step 07 - Recursion/PALINDROME-PARTITIONING.py",
        "hash": null,
        "title": "Palindrome Partitioning",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "generate-parantheses",
      "cpp": null,
      "python": {
        "id": "step_07_-_recursion_generate-parantheses",
        "file": "Step 07 - Recursion/GENERATE-PARANTHESES.py",
        "hash": null,
        "title": "Generate Parantheses",
        "difficulty": "Easy",
        "category": "Step 07 - Recursion"
      },
      "patterns": [
        "Backtracking",
        "Recursion"
      ],
      "match_status": "python_only"
    },
    {
      "key": "substring-containing-all-three-chars",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_substring-containing-all-three-chars",
        "file": "Step 10 - Sliding Window/SUBSTRING-CONTAINING-ALL-THREE-CHARS.py",
        "hash": null,
        "title": "Substring Containing All Three Chars",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-substr-rep-chars",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_longest-substr-rep-chars",
        "file": "Step 10 - Sliding Window/LONGEST-SUBSTR-REP-CHARS.py",
        "hash": null,
        "title": "Longest Substr Rep Chars",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-k-uniq-elem-subarray",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_count-k-uniq-elem-subarray",
        "file": "Step 10 - Sliding Window/COUNT-K-UNIQ-ELEM-SUBARRAY.py",
        "hash": null,
        "title": "Count K Uniq Elem Subarray",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-window-substring",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_min-window-substring",
        "file": "Step 10 - Sliding Window/MIN-WINDOW-SUBSTRING.py",
        "hash": null,
        "title": "Min Window Substring",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "fruits-baskets",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_fruits-baskets",
        "file": "Step 10 - Sliding Window/FRUITS-BASKETS.py",
        "hash": null,
        "title": "Fruits Baskets",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-consec-ones",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_max-consec-ones",
        "file": "Step 10 - Sliding Window/MAX-CONSEC-ONES.py",
        "hash": null,
        "title": "Max Consec Ones",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-k-uniq-chars-substring",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_longest-k-uniq-chars-substring",
        "file": "Step 10 - Sliding Window/LONGEST-K-UNIQ-CHARS-SUBSTRING.py",
        "hash": null,
        "title": "Longest K Uniq Chars Substring",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-rep-chars-replace",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_longest-rep-chars-replace",
        "file": "Step 10 - Sliding Window/LONGEST-REP-CHARS-REPLACE.py",
        "hash": null,
        "title": "Longest Rep Chars Replace",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "binary-subarr-with-goal",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_binary-subarr-with-goal",
        "file": "Step 10 - Sliding Window/BINARY-SUBARR-WITH-GOAL.py",
        "hash": null,
        "title": "Binary Subarr With Goal",
        "difficulty": "Medium",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "nice-subarray",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_nice-subarray",
        "file": "Step 10 - Sliding Window/NICE-SUBARRAY.py",
        "hash": null,
        "title": "Nice Subarray",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-points-obtained-from-cards",
      "cpp": null,
      "python": {
        "id": "step_10_-_sliding_window_max-points-obtained-from-cards",
        "file": "Step 10 - Sliding Window/MAX-POINTS-OBTAINED-FROM-CARDS.py",
        "hash": null,
        "title": "Max Points Obtained From Cards",
        "difficulty": "Easy",
        "category": "Step 10 - Sliding Window"
      },
      "patterns": [
        "Sliding Window",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "check-palindrome",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_check-palindrome",
        "file": "Step 01 - Basics/CHECK-PALINDROME.py",
        "hash": null,
        "title": "Check Palindrome",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "lcm-gcd",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_lcm-gcd",
        "file": "Step 01 - Basics/LCM-GCD.py",
        "hash": null,
        "title": "Lcm Gcd",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "armstrong-number",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_armstrong-number",
        "file": "Step 01 - Basics/ARMSTRONG-NUMBER.py",
        "hash": null,
        "title": "Armstrong Number",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-primes",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_count-primes",
        "file": "Step 01 - Basics/COUNT-PRIMES.py",
        "hash": null,
        "title": "Count Primes",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "all-divisors",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_all-divisors",
        "file": "Step 01 - Basics/ALL-DIVISORS.py",
        "hash": null,
        "title": "All Divisors",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "reverse-number",
      "cpp": null,
      "python": {
        "id": "step_01_-_basics_reverse-number",
        "file": "Step 01 - Basics/REVERSE-NUMBER.py",
        "hash": null,
        "title": "Reverse Number",
        "difficulty": "Easy",
        "category": "Step 01 - Basics"
      },
      "patterns": [
        "General"
      ],
      "match_status": "python_only"
    },
    {
      "key": "divide-arr-in-sets-of-k-consec-numbers",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_divide-arr-in-sets-of-k-consec-numbers",
        "file": "Step 11 - Heaps/DIVIDE-ARR-IN-SETS-OF-K-CONSEC-NUMBERS.py",
        "hash": null,
        "title": "Divide Arr In Sets Of K Consec Numbers",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "replace-with-rank",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_replace-with-rank",
        "file": "Step 11 - Heaps/REPLACE-WITH-RANK.py",
        "hash": null,
        "title": "Replace With Rank",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "median-data-stream",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_median-data-stream",
        "file": "Step 11 - Heaps/MEDIAN-DATA-STREAM.py",
        "hash": null,
        "title": "Median Data Stream",
        "difficulty": "Hard",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-combination-sum",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_max-combination-sum",
        "file": "Step 11 - Heaps/MAX-COMBINATION-SUM.py",
        "hash": null,
        "title": "Max Combination Sum",
        "difficulty": "Hard",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-k-sorted-arr",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_merge-k-sorted-arr",
        "file": "Step 11 - Heaps/MERGE-K-SORTED-ARR.py",
        "hash": null,
        "title": "Merge K Sorted Arr",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "heap-sort",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_heap-sort",
        "file": "Step 11 - Heaps/HEAP-SORT.py",
        "hash": null,
        "title": "Heap Sort",
        "difficulty": "Medium",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "kth-largest-in-stream",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_kth-largest-in-stream",
        "file": "Step 11 - Heaps/KTH-LARGEST-IN-STREAM.py",
        "hash": null,
        "title": "Kth Largest In Stream",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "intro-implement",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_intro-implement",
        "file": "Step 11 - Heaps/INTRO-IMPLEMENT.py",
        "hash": null,
        "title": "Intro Implement",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-k-linkedlists",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_merge-k-linkedlists",
        "file": "Step 11 - Heaps/MERGE-K-LINKEDLISTS.py",
        "hash": null,
        "title": "Merge K Linkedlists",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-cost-of-rope",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_min-cost-of-rope",
        "file": "Step 11 - Heaps/MIN-COST-OF-ROPE.py",
        "hash": null,
        "title": "Min Cost Of Rope",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "k-most-frequent",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_k-most-frequent",
        "file": "Step 11 - Heaps/K-MOST-FREQUENT.py",
        "hash": null,
        "title": "K Most Frequent",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "kth-largest",
      "cpp": null,
      "python": {
        "id": "step_11_-_heaps_kth-largest",
        "file": "Step 11 - Heaps/KTH-LARGEST.py",
        "hash": null,
        "title": "Kth Largest",
        "difficulty": "Easy",
        "category": "Step 11 - Heaps"
      },
      "patterns": [
        "Heap",
        "Priority Queue"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-product-subarr",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_max-product-subarr",
        "file": "Step 03 - Arrays/MAX-PRODUCT-SUBARR.py",
        "hash": null,
        "title": "Max Product Subarr",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-subarr-with-sum-k",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_longest-subarr-with-sum-k",
        "file": "Step 03 - Arrays/LONGEST-SUBARR-WITH-SUM-K.py",
        "hash": null,
        "title": "Longest Subarr With Sum K",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "set-matrix-zero",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_set-matrix-zero",
        "file": "Step 03 - Arrays/SET-MATRIX-ZERO.py",
        "hash": null,
        "title": "Set Matrix Zero",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rotate-image",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_rotate-image",
        "file": "Step 03 - Arrays/ROTATE-IMAGE.py",
        "hash": null,
        "title": "Rotate Image",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subarr-sum-eq-k",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_subarr-sum-eq-k",
        "file": "Step 03 - Arrays/SUBARR-SUM-EQ-K.py",
        "hash": null,
        "title": "Subarr Sum Eq K",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-sorted-arr",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_merge-sorted-arr",
        "file": "Step 03 - Arrays/MERGE-SORTED-ARR.py",
        "hash": null,
        "title": "Merge Sorted Arr",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "2-sum",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_2-sum",
        "file": "Step 03 - Arrays/2-SUM.py",
        "hash": null,
        "title": "2 Sum",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "missing-repeating",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_missing-repeating",
        "file": "Step 03 - Arrays/MISSING-REPEATING.py",
        "hash": null,
        "title": "Missing Repeating",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "grumpy-bookstore-owner",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_grumpy-bookstore-owner",
        "file": "Step 03 - Arrays/GRUMPY-BOOKSTORE-OWNER.py",
        "hash": null,
        "title": "Grumpy Bookstore Owner",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rotate-array-d-places",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_rotate-array-d-places",
        "file": "Step 03 - Arrays/ROTATE-ARRAY-D-PLACES.py",
        "hash": null,
        "title": "Rotate Array D Places",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "contiguous-array",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_contiguous-array",
        "file": "Step 03 - Arrays/CONTIGUOUS-ARRAY.py",
        "hash": null,
        "title": "Contiguous Array",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "rev-pairs",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_rev-pairs",
        "file": "Step 03 - Arrays/REV-PAIRS.py",
        "hash": null,
        "title": "Rev Pairs",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "print-max-sum-subarr",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_print-max-sum-subarr",
        "file": "Step 03 - Arrays/PRINT-MAX-SUM-SUBARR.py",
        "hash": null,
        "title": "Print Max Sum Subarr",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "spiral-matrix",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_spiral-matrix",
        "file": "Step 03 - Arrays/SPIRAL-MATRIX.py",
        "hash": null,
        "title": "Spiral Matrix",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "3-sum-closest",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_3-sum-closest",
        "file": "Step 03 - Arrays/3-SUM-CLOSEST.py",
        "hash": null,
        "title": "3 Sum Closest",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "kth-element",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_kth-element",
        "file": "Step 03 - Arrays/KTH-ELEMENT.py",
        "hash": null,
        "title": "Kth Element",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "array-leaders",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_array-leaders",
        "file": "Step 03 - Arrays/ARRAY-LEADERS.py",
        "hash": null,
        "title": "Array Leaders",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "move-zeros-to-end",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_move-zeros-to-end",
        "file": "Step 03 - Arrays/MOVE-ZEROS-TO-END.py",
        "hash": null,
        "title": "Move Zeros To End",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "longest-consecutive-subseq",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_longest-consecutive-subseq",
        "file": "Step 03 - Arrays/LONGEST-CONSECUTIVE-SUBSEQ.py",
        "hash": null,
        "title": "Longest Consecutive Subseq",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "pascal-triang",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_pascal-triang",
        "file": "Step 03 - Arrays/PASCAL-TRIANG.py",
        "hash": null,
        "title": "Pascal Triang",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-intervals",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_merge-intervals",
        "file": "Step 03 - Arrays/MERGE-INTERVALS.py",
        "hash": null,
        "title": "Merge Intervals",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "spiral-matrix-iv",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_spiral-matrix-iv",
        "file": "Step 03 - Arrays/SPIRAL-MATRIX-IV.py",
        "hash": null,
        "title": "Spiral Matrix Iv",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sort-0s-1s-2s",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_sort-0s-1s-2s",
        "file": "Step 03 - Arrays/SORT-0S-1S-2S.py",
        "hash": null,
        "title": "Sort 0S 1S 2S",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "max-sum-subarray",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_max-sum-subarray",
        "file": "Step 03 - Arrays/MAX-SUM-SUBARRAY.py",
        "hash": null,
        "title": "Max Sum Subarray",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "remove-duplicates-sorted-arr",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_remove-duplicates-sorted-arr",
        "file": "Step 03 - Arrays/REMOVE-DUPLICATES-SORTED-ARR.py",
        "hash": null,
        "title": "Remove Duplicates Sorted Arr",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "best-time-to-buy-sell-stock",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_best-time-to-buy-sell-stock",
        "file": "Step 03 - Arrays/BEST-TIME-TO-BUY-SELL-STOCK.py",
        "hash": null,
        "title": "Best Time To Buy Sell Stock",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "largest-subarr-with-zero-sum",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_largest-subarr-with-zero-sum",
        "file": "Step 03 - Arrays/LARGEST-SUBARR-WITH-ZERO-SUM.py",
        "hash": null,
        "title": "Largest Subarr With Zero Sum",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "subarr-with-xor-x",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_subarr-with-xor-x",
        "file": "Step 03 - Arrays/SUBARR-WITH-XOR-X.py",
        "hash": null,
        "title": "Subarr With Xor X",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "union-find",
      "cpp": null,
      "python": {
        "id": "step_03_-_arrays_union-find",
        "file": "Step 03 - Arrays/UNION-FIND.py",
        "hash": null,
        "title": "Union Find",
        "difficulty": "Easy",
        "category": "Step 03 - Arrays"
      },
      "patterns": [
        "Array",
        "Sorting",
        "Two Pointers"
      ],
      "match_status": "python_only"
    },
    {
      "key": "set-unset-rightmost-unset",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_set-unset-rightmost-unset",
        "file": "Step 08 - Bit Manipulation/SET-UNSET-RIGHTMOST-UNSET.py",
        "hash": null,
        "title": "Set Unset Rightmost Unset",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "sieve",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_sieve",
        "file": "Step 08 - Bit Manipulation/SIEVE.py",
        "hash": null,
        "title": "Sieve",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-set-bits",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_count-set-bits",
        "file": "Step 08 - Bit Manipulation/COUNT-SET-BITS.py",
        "hash": null,
        "title": "Count Set Bits",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "xor-l-to-r",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_xor-l-to-r",
        "file": "Step 08 - Bit Manipulation/XOR-L-TO-R.py",
        "hash": null,
        "title": "Xor L To R",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "prime-factorisation",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_prime-factorisation",
        "file": "Step 08 - Bit Manipulation/PRIME-FACTORISATION.py",
        "hash": null,
        "title": "Prime Factorisation",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "all-div-of-a-num",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_all-div-of-a-num",
        "file": "Step 08 - Bit Manipulation/ALL-DIV-OF-A-NUM.py",
        "hash": null,
        "title": "All Div Of A Num",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "count-bits-to-flip-a-to-b",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_count-bits-to-flip-a-to-b",
        "file": "Step 08 - Bit Manipulation/COUNT-BITS-TO-FLIP-A-TO-B.py",
        "hash": null,
        "title": "Count Bits To Flip A To B",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "check-ith-bit",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_check-ith-bit",
        "file": "Step 08 - Bit Manipulation/CHECK-ITH-BIT.py",
        "hash": null,
        "title": "Check Ith Bit",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "two-numbers-with-odd-occurence",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_two-numbers-with-odd-occurence",
        "file": "Step 08 - Bit Manipulation/TWO-NUMBERS-WITH-ODD-OCCURENCE.py",
        "hash": null,
        "title": "Two Numbers With Odd Occurence",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "divide-two-int",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_divide-two-int",
        "file": "Step 08 - Bit Manipulation/DIVIDE-TWO-INT.py",
        "hash": null,
        "title": "Divide Two Int",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "power-of-two",
      "cpp": null,
      "python": {
        "id": "step_08_-_bit_manipulation_power-of-two",
        "file": "Step 08 - Bit Manipulation/POWER-OF-TWO.py",
        "hash": null,
        "title": "Power Of Two",
        "difficulty": "Easy",
        "category": "Step 08 - Bit Manipulation"
      },
      "patterns": [
        "Bit Manipulation"
      ],
      "match_status": "python_only"
    },
    {
      "key": "valid-parantheses-02",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_valid-parantheses-02",
        "file": "Step 12 - Greedy Algorithm/VALID-PARANTHESES-02.py",
        "hash": null,
        "title": "Valid Parantheses 02",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "shortest-job-first",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_shortest-job-first",
        "file": "Step 12 - Greedy Algorithm/SHORTEST-JOB-FIRST.py",
        "hash": null,
        "title": "Shortest Job First",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "jump-game-02",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_jump-game-02",
        "file": "Step 12 - Greedy Algorithm/JUMP-GAME-02.py",
        "hash": null,
        "title": "Jump Game 02",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "n-meetings",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_n-meetings",
        "file": "Step 12 - Greedy Algorithm/N-MEETINGS.py",
        "hash": null,
        "title": "N Meetings",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "jump-game-01",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_jump-game-01",
        "file": "Step 12 - Greedy Algorithm/JUMP-GAME-01.py",
        "hash": null,
        "title": "Jump Game 01",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "page-fault",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_page-fault",
        "file": "Step 12 - Greedy Algorithm/PAGE-FAULT.py",
        "hash": null,
        "title": "Page Fault",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "min-number-platforms",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_min-number-platforms",
        "file": "Step 12 - Greedy Algorithm/MIN-NUMBER-PLATFORMS.py",
        "hash": null,
        "title": "Min Number Platforms",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "merge-intervals",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_merge-intervals",
        "file": "Step 12 - Greedy Algorithm/MERGE-INTERVALS.py",
        "hash": null,
        "title": "Merge Intervals",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "valid-parantheses-01",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_valid-parantheses-01",
        "file": "Step 12 - Greedy Algorithm/VALID-PARANTHESES-01.py",
        "hash": null,
        "title": "Valid Parantheses 01",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    },
    {
      "key": "job-seq-problem",
      "cpp": null,
      "python": {
        "id": "step_12_-_greedy_algorithm_job-seq-problem",
        "file": "Step 12 - Greedy Algorithm/JOB-SEQ-PROBLEM.py",
        "hash": null,
        "title": "Job Seq Problem",
        "difficulty": "Easy",
        "category": "Step 12 - Greedy Algorithm"
      },
      "patterns": [
        "Greedy",
        "Sorting"
      ],
      "match_status": "python_only"
    }
  ]
}